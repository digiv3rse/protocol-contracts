/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MetaTxLibInterface extends utils.Interface {
  functions: {};

  events: {
    "NonceUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NonceUpdated"): EventFragment;
}

export interface NonceUpdatedEventObject {
  signer: string;
  nonce: BigNumber;
  timestamp: BigNumber;
}
export type NonceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NonceUpdatedEventObject
>;

export type NonceUpdatedEventFilter = TypedEventFilter<NonceUpdatedEvent>;

export interface MetaTxLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaTxLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "NonceUpdated(address,uint256,uint256)"(
      signer?: string | null,
      nonce?: null,
      timestamp?: null
    ): NonceUpdatedEventFilter;
    NonceUpdated(
      signer?: string | null,
      nonce?: null,
      timestamp?: null
    ): NonceUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
