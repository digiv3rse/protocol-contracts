/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace PrintLibrary {
  export type MintParamsStruct = {
    acceptedTokens: string[];
    prices: BigNumberish[];
    communityIds: BigNumberish[];
    uri: string;
    fulfiller: string;
    creator: string;
    printType: BigNumberish;
    origin: BigNumberish;
    amount: BigNumberish;
    pubId: BigNumberish;
    profileId: BigNumberish;
    dropId: BigNumberish;
    unlimited: boolean;
    encrypted: boolean;
  };

  export type MintParamsStructOutput = [
    string[],
    BigNumber[],
    BigNumber[],
    string,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    acceptedTokens: string[];
    prices: BigNumber[];
    communityIds: BigNumber[];
    uri: string;
    fulfiller: string;
    creator: string;
    printType: number;
    origin: number;
    amount: BigNumber;
    pubId: BigNumber;
    profileId: BigNumber;
    dropId: BigNumber;
    unlimited: boolean;
    encrypted: boolean;
  };
}

export interface CollectionCreatorInterface extends utils.Interface {
  functions: {
    "createCollection((address[],uint256[],uint256[],string,address,address,uint8,uint8,uint256,uint256,uint256,uint256,bool,bool))": FunctionFragment;
    "createDrop(string)": FunctionFragment;
    "marketCreator()": FunctionFragment;
    "name()": FunctionFragment;
    "nftCreator()": FunctionFragment;
    "printAccessControl()": FunctionFragment;
    "printDesignData()": FunctionFragment;
    "printSplitsData()": FunctionFragment;
    "purchaseAndMintToken(uint256[],uint256[],uint256[],address,address)": FunctionFragment;
    "removeCollection(uint256)": FunctionFragment;
    "removeDrop(uint256)": FunctionFragment;
    "setMarketCreatorAddress(address)": FunctionFragment;
    "setNFTCreatorAddress(address)": FunctionFragment;
    "setPrintAccessControlAddress(address)": FunctionFragment;
    "setPrintDesignDataAddress(address)": FunctionFragment;
    "setPrintSplitsDataAddress(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "updateDrop(uint256[],string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createCollection"
      | "createDrop"
      | "marketCreator"
      | "name"
      | "nftCreator"
      | "printAccessControl"
      | "printDesignData"
      | "printSplitsData"
      | "purchaseAndMintToken"
      | "removeCollection"
      | "removeDrop"
      | "setMarketCreatorAddress"
      | "setNFTCreatorAddress"
      | "setPrintAccessControlAddress"
      | "setPrintDesignDataAddress"
      | "setPrintSplitsDataAddress"
      | "symbol"
      | "updateDrop"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createCollection",
    values: [PrintLibrary.MintParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "createDrop", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marketCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "printAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "printDesignData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "printSplitsData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseAndMintToken",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketCreatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTCreatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrintAccessControlAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrintDesignDataAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrintSplitsDataAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDrop",
    values: [BigNumberish[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "printAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "printDesignData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "printSplitsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseAndMintToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrintAccessControlAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrintDesignDataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrintSplitsDataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateDrop", data: BytesLike): Result;

  events: {};
}

export interface CollectionCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectionCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createCollection(
      _params: PrintLibrary.MintParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createDrop(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketCreator(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftCreator(overrides?: CallOverrides): Promise<[string]>;

    printAccessControl(overrides?: CallOverrides): Promise<[string]>;

    printDesignData(overrides?: CallOverrides): Promise<[string]>;

    printSplitsData(overrides?: CallOverrides): Promise<[string]>;

    purchaseAndMintToken(
      _collectionIds: BigNumberish[],
      _amounts: BigNumberish[],
      _chosenIndexes: BigNumberish[],
      _purchaserAddress: string,
      _chosenCurrency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeCollection(
      _collectionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDrop(
      _dropId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNFTCreatorAddress(
      _newNFTCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrintSplitsDataAddress(
      _newPrintSplitsDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    updateDrop(
      _collectionIds: BigNumberish[],
      _uri: string,
      _dropId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  createCollection(
    _params: PrintLibrary.MintParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createDrop(
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketCreator(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nftCreator(overrides?: CallOverrides): Promise<string>;

  printAccessControl(overrides?: CallOverrides): Promise<string>;

  printDesignData(overrides?: CallOverrides): Promise<string>;

  printSplitsData(overrides?: CallOverrides): Promise<string>;

  purchaseAndMintToken(
    _collectionIds: BigNumberish[],
    _amounts: BigNumberish[],
    _chosenIndexes: BigNumberish[],
    _purchaserAddress: string,
    _chosenCurrency: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeCollection(
    _collectionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDrop(
    _dropId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketCreatorAddress(
    _newMarketCreatorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNFTCreatorAddress(
    _newNFTCreatorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrintAccessControlAddress(
    _newPrintAccessControlAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrintDesignDataAddress(
    _newPrintDesignDataAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrintSplitsDataAddress(
    _newPrintSplitsDataAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  updateDrop(
    _collectionIds: BigNumberish[],
    _uri: string,
    _dropId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    createCollection(
      _params: PrintLibrary.MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDrop(_uri: string, overrides?: CallOverrides): Promise<void>;

    marketCreator(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nftCreator(overrides?: CallOverrides): Promise<string>;

    printAccessControl(overrides?: CallOverrides): Promise<string>;

    printDesignData(overrides?: CallOverrides): Promise<string>;

    printSplitsData(overrides?: CallOverrides): Promise<string>;

    purchaseAndMintToken(
      _collectionIds: BigNumberish[],
      _amounts: BigNumberish[],
      _chosenIndexes: BigNumberish[],
      _purchaserAddress: string,
      _chosenCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollection(
      _collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDrop(_dropId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTCreatorAddress(
      _newNFTCreatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrintSplitsDataAddress(
      _newPrintSplitsDataAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    updateDrop(
      _collectionIds: BigNumberish[],
      _uri: string,
      _dropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createCollection(
      _params: PrintLibrary.MintParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createDrop(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    marketCreator(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftCreator(overrides?: CallOverrides): Promise<BigNumber>;

    printAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    printDesignData(overrides?: CallOverrides): Promise<BigNumber>;

    printSplitsData(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseAndMintToken(
      _collectionIds: BigNumberish[],
      _amounts: BigNumberish[],
      _chosenIndexes: BigNumberish[],
      _purchaserAddress: string,
      _chosenCurrency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeCollection(
      _collectionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDrop(
      _dropId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNFTCreatorAddress(
      _newNFTCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrintSplitsDataAddress(
      _newPrintSplitsDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    updateDrop(
      _collectionIds: BigNumberish[],
      _uri: string,
      _dropId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createCollection(
      _params: PrintLibrary.MintParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createDrop(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printAccessControl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    printDesignData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printSplitsData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseAndMintToken(
      _collectionIds: BigNumberish[],
      _amounts: BigNumberish[],
      _chosenIndexes: BigNumberish[],
      _purchaserAddress: string,
      _chosenCurrency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeCollection(
      _collectionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDrop(
      _dropId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNFTCreatorAddress(
      _newNFTCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrintSplitsDataAddress(
      _newPrintSplitsDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDrop(
      _collectionIds: BigNumberish[],
      _uri: string,
      _dropId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
