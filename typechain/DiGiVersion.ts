/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DiGiVersionInterface extends utils.Interface {
  functions: {
    "emitVersion()": FunctionFragment;
    "getGitCommit()": FunctionFragment;
    "getVersion()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "emitVersion" | "getGitCommit" | "getVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emitVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGitCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "emitVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGitCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;

  events: {
    "DiGiUpgradeVersion(address,string,bytes20,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiGiUpgradeVersion"): EventFragment;
}

export interface DiGiUpgradeVersionEventObject {
  implementation: string;
  version: string;
  gitCommit: string;
  timestamp: BigNumber;
}
export type DiGiUpgradeVersionEvent = TypedEvent<
  [string, string, string, BigNumber],
  DiGiUpgradeVersionEventObject
>;

export type DiGiUpgradeVersionEventFilter =
  TypedEventFilter<DiGiUpgradeVersionEvent>;

export interface DiGiVersion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiGiVersionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitVersion(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getGitCommit(overrides?: CallOverrides): Promise<[string]>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;
  };

  emitVersion(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getGitCommit(overrides?: CallOverrides): Promise<string>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    emitVersion(overrides?: CallOverrides): Promise<void>;

    getGitCommit(overrides?: CallOverrides): Promise<string>;

    getVersion(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DiGiUpgradeVersion(address,string,bytes20,uint256)"(
      implementation?: null,
      version?: null,
      gitCommit?: null,
      timestamp?: null
    ): DiGiUpgradeVersionEventFilter;
    DiGiUpgradeVersion(
      implementation?: null,
      version?: null,
      gitCommit?: null,
      timestamp?: null
    ): DiGiUpgradeVersionEventFilter;
  };

  estimateGas: {
    emitVersion(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getGitCommit(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    emitVersion(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getGitCommit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
