/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PrintSplitsDataInterface extends utils.Interface {
  functions: {
    "addCurrency(address,uint256)": FunctionFragment;
    "getAllCurrencies()": FunctionFragment;
    "getDesignerSplit(address,uint8)": FunctionFragment;
    "getFulfillerBase(address,uint8)": FunctionFragment;
    "getFulfillerSplit(address,uint8)": FunctionFragment;
    "getIsCurrency(address)": FunctionFragment;
    "getRateByCurrency(address)": FunctionFragment;
    "getTreasurySplit(address,uint8)": FunctionFragment;
    "getWeiByCurrency(address)": FunctionFragment;
    "name()": FunctionFragment;
    "printAccessControl()": FunctionFragment;
    "removeCurrency(address)": FunctionFragment;
    "setDesignerSplit(address,uint8,uint256)": FunctionFragment;
    "setFulfillerBase(address,uint8,uint256)": FunctionFragment;
    "setFulfillerSplit(address,uint8,uint256)": FunctionFragment;
    "setOraclePriceUSD(address,uint256)": FunctionFragment;
    "setPrintAccessControlAddress(address)": FunctionFragment;
    "setTreasurySplit(address,uint8,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCurrency"
      | "getAllCurrencies"
      | "getDesignerSplit"
      | "getFulfillerBase"
      | "getFulfillerSplit"
      | "getIsCurrency"
      | "getRateByCurrency"
      | "getTreasurySplit"
      | "getWeiByCurrency"
      | "name"
      | "printAccessControl"
      | "removeCurrency"
      | "setDesignerSplit"
      | "setFulfillerBase"
      | "setFulfillerSplit"
      | "setOraclePriceUSD"
      | "setPrintAccessControlAddress"
      | "setTreasurySplit"
      | "symbol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCurrency",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCurrencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDesignerSplit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFulfillerBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFulfillerSplit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateByCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasurySplit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeiByCurrency",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "printAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDesignerSplit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFulfillerBase",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFulfillerSplit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOraclePriceUSD",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrintAccessControlAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasurySplit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesignerSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFulfillerBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFulfillerSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateByCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasurySplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeiByCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "printAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDesignerSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFulfillerBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFulfillerSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOraclePriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrintAccessControlAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasurySplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {
    "CurrencyAdded(address)": EventFragment;
    "CurrencyRemoved(address)": EventFragment;
    "DesignerSplitSet(address,uint8,uint256)": EventFragment;
    "FulfillerBaseSet(address,uint8,uint256)": EventFragment;
    "FulfillerSplitSet(address,uint8,uint256)": EventFragment;
    "OracleUpdated(address,uint256)": EventFragment;
    "TreasurySplitSet(address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurrencyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurrencyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DesignerSplitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillerBaseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillerSplitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySplitSet"): EventFragment;
}

export interface CurrencyAddedEventObject {
  currency: string;
}
export type CurrencyAddedEvent = TypedEvent<[string], CurrencyAddedEventObject>;

export type CurrencyAddedEventFilter = TypedEventFilter<CurrencyAddedEvent>;

export interface CurrencyRemovedEventObject {
  currency: string;
}
export type CurrencyRemovedEvent = TypedEvent<
  [string],
  CurrencyRemovedEventObject
>;

export type CurrencyRemovedEventFilter = TypedEventFilter<CurrencyRemovedEvent>;

export interface DesignerSplitSetEventObject {
  designer: string;
  printType: number;
  split: BigNumber;
}
export type DesignerSplitSetEvent = TypedEvent<
  [string, number, BigNumber],
  DesignerSplitSetEventObject
>;

export type DesignerSplitSetEventFilter =
  TypedEventFilter<DesignerSplitSetEvent>;

export interface FulfillerBaseSetEventObject {
  fulfiller: string;
  printType: number;
  split: BigNumber;
}
export type FulfillerBaseSetEvent = TypedEvent<
  [string, number, BigNumber],
  FulfillerBaseSetEventObject
>;

export type FulfillerBaseSetEventFilter =
  TypedEventFilter<FulfillerBaseSetEvent>;

export interface FulfillerSplitSetEventObject {
  fulfiller: string;
  printType: number;
  split: BigNumber;
}
export type FulfillerSplitSetEvent = TypedEvent<
  [string, number, BigNumber],
  FulfillerSplitSetEventObject
>;

export type FulfillerSplitSetEventFilter =
  TypedEventFilter<FulfillerSplitSetEvent>;

export interface OracleUpdatedEventObject {
  currency: string;
  rate: BigNumber;
}
export type OracleUpdatedEvent = TypedEvent<
  [string, BigNumber],
  OracleUpdatedEventObject
>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface TreasurySplitSetEventObject {
  treasury: string;
  printType: number;
  split: BigNumber;
}
export type TreasurySplitSetEvent = TypedEvent<
  [string, number, BigNumber],
  TreasurySplitSetEventObject
>;

export type TreasurySplitSetEventFilter =
  TypedEventFilter<TreasurySplitSetEvent>;

export interface PrintSplitsData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrintSplitsDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCurrency(
      _currency: string,
      _weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllCurrencies(overrides?: CallOverrides): Promise<[string[]]>;

    getDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsCurrency(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRateByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWeiByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    printAccessControl(overrides?: CallOverrides): Promise<[string]>;

    removeCurrency(
      _currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOraclePriceUSD(
      _currencyAddress: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;
  };

  addCurrency(
    _currency: string,
    _weiAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllCurrencies(overrides?: CallOverrides): Promise<string[]>;

  getDesignerSplit(
    _address: string,
    _printType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFulfillerBase(
    _address: string,
    _printType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFulfillerSplit(
    _address: string,
    _printType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsCurrency(_address: string, overrides?: CallOverrides): Promise<boolean>;

  getRateByCurrency(
    _currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreasurySplit(
    _address: string,
    _printType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWeiByCurrency(
    _currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  printAccessControl(overrides?: CallOverrides): Promise<string>;

  removeCurrency(
    _currency: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDesignerSplit(
    _address: string,
    _printType: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFulfillerBase(
    _address: string,
    _printType: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFulfillerSplit(
    _address: string,
    _printType: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOraclePriceUSD(
    _currencyAddress: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrintAccessControlAddress(
    _newPrintAccessControlAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasurySplit(
    _address: string,
    _printType: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addCurrency(
      _currency: string,
      _weiAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllCurrencies(overrides?: CallOverrides): Promise<string[]>;

    getDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsCurrency(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRateByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeiByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    printAccessControl(overrides?: CallOverrides): Promise<string>;

    removeCurrency(_currency: string, overrides?: CallOverrides): Promise<void>;

    setDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOraclePriceUSD(
      _currencyAddress: string,
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CurrencyAdded(address)"(
      currency?: string | null
    ): CurrencyAddedEventFilter;
    CurrencyAdded(currency?: string | null): CurrencyAddedEventFilter;

    "CurrencyRemoved(address)"(
      currency?: string | null
    ): CurrencyRemovedEventFilter;
    CurrencyRemoved(currency?: string | null): CurrencyRemovedEventFilter;

    "DesignerSplitSet(address,uint8,uint256)"(
      designer?: null,
      printType?: null,
      split?: null
    ): DesignerSplitSetEventFilter;
    DesignerSplitSet(
      designer?: null,
      printType?: null,
      split?: null
    ): DesignerSplitSetEventFilter;

    "FulfillerBaseSet(address,uint8,uint256)"(
      fulfiller?: null,
      printType?: null,
      split?: null
    ): FulfillerBaseSetEventFilter;
    FulfillerBaseSet(
      fulfiller?: null,
      printType?: null,
      split?: null
    ): FulfillerBaseSetEventFilter;

    "FulfillerSplitSet(address,uint8,uint256)"(
      fulfiller?: null,
      printType?: null,
      split?: null
    ): FulfillerSplitSetEventFilter;
    FulfillerSplitSet(
      fulfiller?: null,
      printType?: null,
      split?: null
    ): FulfillerSplitSetEventFilter;

    "OracleUpdated(address,uint256)"(
      currency?: string | null,
      rate?: null
    ): OracleUpdatedEventFilter;
    OracleUpdated(
      currency?: string | null,
      rate?: null
    ): OracleUpdatedEventFilter;

    "TreasurySplitSet(address,uint8,uint256)"(
      treasury?: null,
      printType?: null,
      split?: null
    ): TreasurySplitSetEventFilter;
    TreasurySplitSet(
      treasury?: null,
      printType?: null,
      split?: null
    ): TreasurySplitSetEventFilter;
  };

  estimateGas: {
    addCurrency(
      _currency: string,
      _weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllCurrencies(overrides?: CallOverrides): Promise<BigNumber>;

    getDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsCurrency(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeiByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    printAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    removeCurrency(
      _currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOraclePriceUSD(
      _currencyAddress: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCurrency(
      _currency: string,
      _weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllCurrencies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsCurrency(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeiByCurrency(
      _currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printAccessControl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCurrency(
      _currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDesignerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFulfillerBase(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFulfillerSplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOraclePriceUSD(
      _currencyAddress: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasurySplit(
      _address: string,
      _printType: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
