/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface MirrorMetaTxTestInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "keyExists(string,string)": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "testArrayHelpers()": FunctionFragment;
    "testBaseTest()": FunctionFragment;
    "testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor(uint256)": FunctionFragment;
    "testCanPublishIf_ExecutorIs_PublisherProfileOwner()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignature_HasExpired()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented()": FunctionFragment;
    "testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid()": FunctionFragment;
    "testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty()": FunctionFragment;
    "testCannotPass_BurntProfile_AsUnverifiedReferrer()": FunctionFragment;
    "testCannotPass_TargetedPublication_AsReferrer()": FunctionFragment;
    "testCannotPass_UnexistentProfile_AsReferrer(uint256,uint8)": FunctionFragment;
    "testCannotPass_UnexistentProfile_AsUnverifiedReferrer(uint256)": FunctionFragment;
    "testCannotPass_UnexistentPublication_AsReferrer(uint256)": FunctionFragment;
    "testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor(uint256)": FunctionFragment;
    "testCannotPublish_IfProtocolStateIs_Paused()": FunctionFragment;
    "testCannotPublish_IfProtocolStateIs_PublishingPaused()": FunctionFragment;
    "testCannotReferenceA_Comment_IfReferenceModule_RejectsIt()": FunctionFragment;
    "testCannotReferenceA_Mirror()": FunctionFragment;
    "testCannotReferenceA_Post_IfReferenceModule_RejectsIt()": FunctionFragment;
    "testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist(uint256)": FunctionFragment;
    "testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub()": FunctionFragment;
    "testCannotReferenceA_Quote_IfReferenceModule_RejectsIt()": FunctionFragment;
    "testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile(uint256)": FunctionFragment;
    "testCannotReference_Itself()": FunctionFragment;
    "testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor()": FunctionFragment;
    "testContentURI_IsCorrect()": FunctionFragment;
    "testContractAddressesLoaderDeployer()": FunctionFragment;
    "testForkManagement()": FunctionFragment;
    "testGetPubPointer()": FunctionFragment;
    "testGetReferenceModule()": FunctionFragment;
    "testKeyExists()": FunctionFragment;
    "testMirrorMetaTxTest()": FunctionFragment;
    "testMirrorTest()": FunctionFragment;
    "testPassingDuplicatedReferralsIsAllowed()": FunctionFragment;
    "testPubIdAssignedIs_EqualsToPubCount_AfterPublishing()": FunctionFragment;
    "testPublicationTypeIsCorrect()": FunctionFragment;
    "testPublisherPubCountIs_IncrementedByOne_AfterPublishing()": FunctionFragment;
    "testTestSetup()": FunctionFragment;
    "testV1_TargetComment_ReferralComment(uint256)": FunctionFragment;
    "testV1_TargetComment_ReferralMirror(uint256)": FunctionFragment;
    "testV1_TargetComment_ReferralV1Post(uint256)": FunctionFragment;
    "testV1_TargetPost_ReferralComment(uint256)": FunctionFragment;
    "testV1_TargetPost_ReferralMirror(uint256)": FunctionFragment;
    "testV2Referrals()": FunctionFragment;
    "testV2UnverifiedReferrals()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "keyExists"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetSelectors"
      | "targetSenders"
      | "testArrayHelpers"
      | "testBaseTest"
      | "testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor"
      | "testCanPublishIf_ExecutorIs_PublisherProfileOwner"
      | "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId"
      | "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name"
      | "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber"
      | "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract"
      | "testCannotExecuteMetaTx_WhenSignature_HasExpired"
      | "testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid"
      | "testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented"
      | "testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid"
      | "testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty"
      | "testCannotPass_BurntProfile_AsUnverifiedReferrer"
      | "testCannotPass_TargetedPublication_AsReferrer"
      | "testCannotPass_UnexistentProfile_AsReferrer"
      | "testCannotPass_UnexistentProfile_AsUnverifiedReferrer"
      | "testCannotPass_UnexistentPublication_AsReferrer"
      | "testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor"
      | "testCannotPublish_IfProtocolStateIs_Paused"
      | "testCannotPublish_IfProtocolStateIs_PublishingPaused"
      | "testCannotReferenceA_Comment_IfReferenceModule_RejectsIt"
      | "testCannotReferenceA_Mirror"
      | "testCannotReferenceA_Post_IfReferenceModule_RejectsIt"
      | "testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist"
      | "testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub"
      | "testCannotReferenceA_Quote_IfReferenceModule_RejectsIt"
      | "testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile"
      | "testCannotReference_Itself"
      | "testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor"
      | "testContentURI_IsCorrect"
      | "testContractAddressesLoaderDeployer"
      | "testForkManagement"
      | "testGetPubPointer"
      | "testGetReferenceModule"
      | "testKeyExists"
      | "testMirrorMetaTxTest"
      | "testMirrorTest"
      | "testPassingDuplicatedReferralsIsAllowed"
      | "testPubIdAssignedIs_EqualsToPubCount_AfterPublishing"
      | "testPublicationTypeIsCorrect"
      | "testPublisherPubCountIs_IncrementedByOne_AfterPublishing"
      | "testTestSetup"
      | "testV1_TargetComment_ReferralComment"
      | "testV1_TargetComment_ReferralMirror"
      | "testV1_TargetComment_ReferralV1Post"
      | "testV1_TargetPost_ReferralComment"
      | "testV1_TargetPost_ReferralMirror"
      | "testV2Referrals"
      | "testV2UnverifiedReferrals"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keyExists",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testArrayHelpers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBaseTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCanPublishIf_ExecutorIs_PublisherProfileOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_HasExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPass_BurntProfile_AsUnverifiedReferrer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPass_TargetedPublication_AsReferrer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPass_UnexistentProfile_AsReferrer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPass_UnexistentProfile_AsUnverifiedReferrer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPass_UnexistentPublication_AsReferrer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPublish_IfProtocolStateIs_Paused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotPublish_IfProtocolStateIs_PublishingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceA_Comment_IfReferenceModule_RejectsIt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceA_Mirror",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceA_Post_IfReferenceModule_RejectsIt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceA_Quote_IfReferenceModule_RejectsIt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotReference_Itself",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testContentURI_IsCorrect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testContractAddressesLoaderDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testForkManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetPubPointer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetReferenceModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testKeyExists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMirrorMetaTxTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMirrorTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPassingDuplicatedReferralsIsAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPubIdAssignedIs_EqualsToPubCount_AfterPublishing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPublicationTypeIsCorrect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPublisherPubCountIs_IncrementedByOne_AfterPublishing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTestSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testV1_TargetComment_ReferralComment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testV1_TargetComment_ReferralMirror",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testV1_TargetComment_ReferralV1Post",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testV1_TargetPost_ReferralComment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testV1_TargetPost_ReferralMirror",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testV2Referrals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testV2UnverifiedReferrals",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testArrayHelpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBaseTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCanPublishIf_ExecutorIs_PublisherProfileOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_HasExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPass_BurntProfile_AsUnverifiedReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPass_TargetedPublication_AsReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPass_UnexistentProfile_AsReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPass_UnexistentProfile_AsUnverifiedReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPass_UnexistentPublication_AsReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPublish_IfProtocolStateIs_Paused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotPublish_IfProtocolStateIs_PublishingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceA_Comment_IfReferenceModule_RejectsIt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceA_Mirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceA_Post_IfReferenceModule_RejectsIt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceA_Quote_IfReferenceModule_RejectsIt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotReference_Itself",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testContentURI_IsCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testContractAddressesLoaderDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testForkManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetPubPointer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetReferenceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testKeyExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMirrorMetaTxTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMirrorTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPassingDuplicatedReferralsIsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPubIdAssignedIs_EqualsToPubCount_AfterPublishing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPublicationTypeIsCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPublisherPubCountIs_IncrementedByOne_AfterPublishing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTestSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV1_TargetComment_ReferralComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV1_TargetComment_ReferralMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV1_TargetComment_ReferralV1Post",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV1_TargetPost_ReferralComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV1_TargetPost_ReferralMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV2Referrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testV2UnverifiedReferrals",
    data: BytesLike
  ): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface MirrorMetaTxTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MirrorMetaTxTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    keyExists(
      json: string,
      key: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    testArrayHelpers(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testBaseTest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor(
      delegatedExecutorPk: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanPublishIf_ExecutorIs_PublisherProfileOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignature_HasExpired(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPass_BurntProfile_AsUnverifiedReferrer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPass_TargetedPublication_AsReferrer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPass_UnexistentProfile_AsReferrer(
      unexistentProfileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPass_UnexistentProfile_AsUnverifiedReferrer(
      unexistentProfileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPass_UnexistentPublication_AsReferrer(
      unexistentPubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor(
      nonOwnerNorDelegatedExecutorPk: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPublish_IfProtocolStateIs_Paused(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotPublish_IfProtocolStateIs_PublishingPaused(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceA_Comment_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceA_Mirror(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceA_Post_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist(
      nonExistentProfileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceA_Quote_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile(
      nonExistentPubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotReference_Itself(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testContentURI_IsCorrect(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testContractAddressesLoaderDeployer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testForkManagement(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetPubPointer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetReferenceModule(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testKeyExists(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testMirrorMetaTxTest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testMirrorTest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testPassingDuplicatedReferralsIsAllowed(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testPubIdAssignedIs_EqualsToPubCount_AfterPublishing(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testPublicationTypeIsCorrect(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testPublisherPubCountIs_IncrementedByOne_AfterPublishing(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV1_TargetComment_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV1_TargetComment_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV1_TargetComment_ReferralV1Post(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV1_TargetPost_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV1_TargetPost_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV2Referrals(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testV2UnverifiedReferrals(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  keyExists(
    json: string,
    key: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  testArrayHelpers(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testBaseTest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor(
    delegatedExecutorPk: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanPublishIf_ExecutorIs_PublisherProfileOwner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignature_HasExpired(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPass_BurntProfile_AsUnverifiedReferrer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPass_TargetedPublication_AsReferrer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPass_UnexistentProfile_AsReferrer(
    unexistentProfileId: BigNumberish,
    pubId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPass_UnexistentProfile_AsUnverifiedReferrer(
    unexistentProfileId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPass_UnexistentPublication_AsReferrer(
    unexistentPubId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor(
    nonOwnerNorDelegatedExecutorPk: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPublish_IfProtocolStateIs_Paused(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotPublish_IfProtocolStateIs_PublishingPaused(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceA_Comment_IfReferenceModule_RejectsIt(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceA_Mirror(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceA_Post_IfReferenceModule_RejectsIt(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist(
    nonExistentProfileId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceA_Quote_IfReferenceModule_RejectsIt(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile(
    nonExistentPubId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotReference_Itself(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testContentURI_IsCorrect(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testContractAddressesLoaderDeployer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testForkManagement(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetPubPointer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetReferenceModule(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testKeyExists(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testMirrorMetaTxTest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testMirrorTest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testPassingDuplicatedReferralsIsAllowed(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testPubIdAssignedIs_EqualsToPubCount_AfterPublishing(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testPublicationTypeIsCorrect(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testPublisherPubCountIs_IncrementedByOne_AfterPublishing(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTestSetup(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV1_TargetComment_ReferralComment(
    v1FuzzBitmap: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV1_TargetComment_ReferralMirror(
    v1FuzzBitmap: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV1_TargetComment_ReferralV1Post(
    v1FuzzBitmap: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV1_TargetPost_ReferralComment(
    v1FuzzBitmap: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV1_TargetPost_ReferralMirror(
    v1FuzzBitmap: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV2Referrals(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testV2UnverifiedReferrals(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    keyExists(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    testArrayHelpers(overrides?: CallOverrides): Promise<void>;

    testBaseTest(overrides?: CallOverrides): Promise<void>;

    testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor(
      delegatedExecutorPk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCanPublishIf_ExecutorIs_PublisherProfileOwner(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignature_HasExpired(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPass_BurntProfile_AsUnverifiedReferrer(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPass_TargetedPublication_AsReferrer(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPass_UnexistentProfile_AsReferrer(
      unexistentProfileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPass_UnexistentProfile_AsUnverifiedReferrer(
      unexistentProfileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPass_UnexistentPublication_AsReferrer(
      unexistentPubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor(
      nonOwnerNorDelegatedExecutorPk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPublish_IfProtocolStateIs_Paused(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotPublish_IfProtocolStateIs_PublishingPaused(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReferenceA_Comment_IfReferenceModule_RejectsIt(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReferenceA_Mirror(overrides?: CallOverrides): Promise<void>;

    testCannotReferenceA_Post_IfReferenceModule_RejectsIt(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist(
      nonExistentProfileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReferenceA_Quote_IfReferenceModule_RejectsIt(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile(
      nonExistentPubId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotReference_Itself(overrides?: CallOverrides): Promise<void>;

    testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor(
      overrides?: CallOverrides
    ): Promise<void>;

    testContentURI_IsCorrect(overrides?: CallOverrides): Promise<void>;

    testContractAddressesLoaderDeployer(
      overrides?: CallOverrides
    ): Promise<void>;

    testForkManagement(overrides?: CallOverrides): Promise<void>;

    testGetPubPointer(overrides?: CallOverrides): Promise<void>;

    testGetReferenceModule(overrides?: CallOverrides): Promise<void>;

    testKeyExists(overrides?: CallOverrides): Promise<void>;

    testMirrorMetaTxTest(overrides?: CallOverrides): Promise<void>;

    testMirrorTest(overrides?: CallOverrides): Promise<void>;

    testPassingDuplicatedReferralsIsAllowed(
      overrides?: CallOverrides
    ): Promise<void>;

    testPubIdAssignedIs_EqualsToPubCount_AfterPublishing(
      overrides?: CallOverrides
    ): Promise<void>;

    testPublicationTypeIsCorrect(overrides?: CallOverrides): Promise<void>;

    testPublisherPubCountIs_IncrementedByOne_AfterPublishing(
      overrides?: CallOverrides
    ): Promise<void>;

    testTestSetup(overrides?: CallOverrides): Promise<void>;

    testV1_TargetComment_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testV1_TargetComment_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testV1_TargetComment_ReferralV1Post(
      v1FuzzBitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testV1_TargetPost_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testV1_TargetPost_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testV2Referrals(overrides?: CallOverrides): Promise<void>;

    testV2UnverifiedReferrals(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    keyExists(
      json: string,
      key: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    testArrayHelpers(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testBaseTest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor(
      delegatedExecutorPk: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCanPublishIf_ExecutorIs_PublisherProfileOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignature_HasExpired(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPass_BurntProfile_AsUnverifiedReferrer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPass_TargetedPublication_AsReferrer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPass_UnexistentProfile_AsReferrer(
      unexistentProfileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPass_UnexistentProfile_AsUnverifiedReferrer(
      unexistentProfileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPass_UnexistentPublication_AsReferrer(
      unexistentPubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor(
      nonOwnerNorDelegatedExecutorPk: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPublish_IfProtocolStateIs_Paused(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotPublish_IfProtocolStateIs_PublishingPaused(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceA_Comment_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceA_Mirror(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceA_Post_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist(
      nonExistentProfileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceA_Quote_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile(
      nonExistentPubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotReference_Itself(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testContentURI_IsCorrect(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testContractAddressesLoaderDeployer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testForkManagement(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetPubPointer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetReferenceModule(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testKeyExists(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testMirrorMetaTxTest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testMirrorTest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testPassingDuplicatedReferralsIsAllowed(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testPubIdAssignedIs_EqualsToPubCount_AfterPublishing(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testPublicationTypeIsCorrect(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testPublisherPubCountIs_IncrementedByOne_AfterPublishing(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV1_TargetComment_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV1_TargetComment_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV1_TargetComment_ReferralV1Post(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV1_TargetPost_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV1_TargetPost_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV2Referrals(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testV2UnverifiedReferrals(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    keyExists(
      json: string,
      key: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testArrayHelpers(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testBaseTest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanPublishIf_ExecutorIs_PublisherProfileApprovedDelegatedExecutor(
      delegatedExecutorPk: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanPublishIf_ExecutorIs_PublisherProfileOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_ChainId(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_Name(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_RevisionNumber(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignatureDomain_WasGeneratedWithWrong_VerifyingContract(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignature_HasExpired(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignature_NonceIsInvalid(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignature_NonceWasIncremented(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteMetaTx_WhenSignature_SignerIsInvalid(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotExecuteOperationIf_ReferralProfileIdsPassedQty_DiffersFromPubIdsQty(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPass_BurntProfile_AsUnverifiedReferrer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPass_TargetedPublication_AsReferrer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPass_UnexistentProfile_AsReferrer(
      unexistentProfileId: BigNumberish,
      pubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPass_UnexistentProfile_AsUnverifiedReferrer(
      unexistentProfileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPass_UnexistentPublication_AsReferrer(
      unexistentPubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPublish_IfExecutorIsNot_PublisherProfileOwnerOrDelegatedExecutor(
      nonOwnerNorDelegatedExecutorPk: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPublish_IfProtocolStateIs_Paused(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotPublish_IfProtocolStateIs_PublishingPaused(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceA_Comment_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceA_Mirror(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceA_Post_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceA_PublicationFromA_ProfileThatDoesNotExist(
      nonExistentProfileId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceA_Publication_IfBlocked_ByTheAuthorOfThePointedPub(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceA_Quote_IfReferenceModule_RejectsIt(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReferenceAn_NonExistentPublication_FromAnExistentProfile(
      nonExistentPubId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotReference_Itself(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_PassV2UnverifiedReferral_SameAsTargetAuthor(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testContentURI_IsCorrect(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testContractAddressesLoaderDeployer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testForkManagement(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetPubPointer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetReferenceModule(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testKeyExists(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testMirrorMetaTxTest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testMirrorTest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testPassingDuplicatedReferralsIsAllowed(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testPubIdAssignedIs_EqualsToPubCount_AfterPublishing(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testPublicationTypeIsCorrect(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testPublisherPubCountIs_IncrementedByOne_AfterPublishing(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV1_TargetComment_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV1_TargetComment_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV1_TargetComment_ReferralV1Post(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV1_TargetPost_ReferralComment(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV1_TargetPost_ReferralMirror(
      v1FuzzBitmap: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV2Referrals(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testV2UnverifiedReferrals(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
