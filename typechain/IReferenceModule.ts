/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Types {
  export type ProcessCommentParamsStruct = {
    profileId: BigNumberish;
    pubId: BigNumberish;
    transactionExecutor: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    data: BytesLike;
  };

  export type ProcessCommentParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    number[],
    string
  ] & {
    profileId: BigNumber;
    pubId: BigNumber;
    transactionExecutor: string;
    pointedProfileId: BigNumber;
    pointedPubId: BigNumber;
    referrerProfileIds: BigNumber[];
    referrerPubIds: BigNumber[];
    referrerPubTypes: number[];
    data: string;
  };

  export type ProcessMirrorParamsStruct = {
    profileId: BigNumberish;
    pubId: BigNumberish;
    transactionExecutor: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    data: BytesLike;
  };

  export type ProcessMirrorParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    number[],
    string
  ] & {
    profileId: BigNumber;
    pubId: BigNumber;
    transactionExecutor: string;
    pointedProfileId: BigNumber;
    pointedPubId: BigNumber;
    referrerProfileIds: BigNumber[];
    referrerPubIds: BigNumber[];
    referrerPubTypes: number[];
    data: string;
  };

  export type ProcessQuoteParamsStruct = {
    profileId: BigNumberish;
    pubId: BigNumberish;
    transactionExecutor: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    data: BytesLike;
  };

  export type ProcessQuoteParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    number[],
    string
  ] & {
    profileId: BigNumber;
    pubId: BigNumber;
    transactionExecutor: string;
    pointedProfileId: BigNumber;
    pointedPubId: BigNumber;
    referrerProfileIds: BigNumber[];
    referrerPubIds: BigNumber[];
    referrerPubTypes: number[];
    data: string;
  };
}

export interface IReferenceModuleInterface extends utils.Interface {
  functions: {
    "initializeReferenceModule(uint256,uint256,address,bytes)": FunctionFragment;
    "processComment((uint256,uint256,address,uint256,uint256,uint256[],uint256[],uint8[],bytes))": FunctionFragment;
    "processMirror((uint256,uint256,address,uint256,uint256,uint256[],uint256[],uint8[],bytes))": FunctionFragment;
    "processQuote((uint256,uint256,address,uint256,uint256,uint256[],uint256[],uint8[],bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "initializeReferenceModule"
      | "processComment"
      | "processMirror"
      | "processQuote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initializeReferenceModule",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processComment",
    values: [Types.ProcessCommentParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "processMirror",
    values: [Types.ProcessMirrorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "processQuote",
    values: [Types.ProcessQuoteParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeReferenceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processQuote",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IReferenceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReferenceModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      transactionExecutor: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  initializeReferenceModule(
    profileId: BigNumberish,
    pubId: BigNumberish,
    transactionExecutor: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  processComment(
    processCommentParams: Types.ProcessCommentParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  processMirror(
    processMirrorParams: Types.ProcessMirrorParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  processQuote(
    processQuoteParams: Types.ProcessQuoteParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      transactionExecutor: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      transactionExecutor: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeReferenceModule(
      profileId: BigNumberish,
      pubId: BigNumberish,
      transactionExecutor: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    processComment(
      processCommentParams: Types.ProcessCommentParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    processMirror(
      processMirrorParams: Types.ProcessMirrorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    processQuote(
      processQuoteParams: Types.ProcessQuoteParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
