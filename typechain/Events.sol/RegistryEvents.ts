/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace RegistryTypes {
  export type HandleStruct = { id: BigNumberish; collection: string };

  export type HandleStructOutput = [BigNumber, string] & {
    id: BigNumber;
    collection: string;
  };

  export type TokenStruct = { id: BigNumberish; collection: string };

  export type TokenStructOutput = [BigNumber, string] & {
    id: BigNumber;
    collection: string;
  };
}

export interface RegistryEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "HandleLinked((uint256,address),(uint256,address),address,uint256)": EventFragment;
    "HandleUnlinked((uint256,address),(uint256,address),address,uint256)": EventFragment;
    "NonceUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HandleLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandleUnlinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceUpdated"): EventFragment;
}

export interface HandleLinkedEventObject {
  handle: RegistryTypes.HandleStructOutput;
  token: RegistryTypes.TokenStructOutput;
  transactionExecutor: string;
  timestamp: BigNumber;
}
export type HandleLinkedEvent = TypedEvent<
  [
    RegistryTypes.HandleStructOutput,
    RegistryTypes.TokenStructOutput,
    string,
    BigNumber
  ],
  HandleLinkedEventObject
>;

export type HandleLinkedEventFilter = TypedEventFilter<HandleLinkedEvent>;

export interface HandleUnlinkedEventObject {
  handle: RegistryTypes.HandleStructOutput;
  token: RegistryTypes.TokenStructOutput;
  transactionExecutor: string;
  timestamp: BigNumber;
}
export type HandleUnlinkedEvent = TypedEvent<
  [
    RegistryTypes.HandleStructOutput,
    RegistryTypes.TokenStructOutput,
    string,
    BigNumber
  ],
  HandleUnlinkedEventObject
>;

export type HandleUnlinkedEventFilter = TypedEventFilter<HandleUnlinkedEvent>;

export interface NonceUpdatedEventObject {
  signer: string;
  nonce: BigNumber;
  timestamp: BigNumber;
}
export type NonceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NonceUpdatedEventObject
>;

export type NonceUpdatedEventFilter = TypedEventFilter<NonceUpdatedEvent>;

export interface RegistryEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "HandleLinked((uint256,address),(uint256,address),address,uint256)"(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleLinkedEventFilter;
    HandleLinked(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleLinkedEventFilter;

    "HandleUnlinked((uint256,address),(uint256,address),address,uint256)"(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleUnlinkedEventFilter;
    HandleUnlinked(
      handle?: null,
      token?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): HandleUnlinkedEventFilter;

    "NonceUpdated(address,uint256,uint256)"(
      signer?: string | null,
      nonce?: null,
      timestamp?: null
    ): NonceUpdatedEventFilter;
    NonceUpdated(
      signer?: string | null,
      nonce?: null,
      timestamp?: null
    ): NonceUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
