/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface ProfileNFTTestInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "keyExists(string,string)": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "testApprovalStateDoesNotChange_afterProtectionStateChanges(address)": FunctionFragment;
    "testApprove(address,address)": FunctionFragment;
    "testApproveAll(address,address)": FunctionFragment;
    "testApproveForAllState_DoesNotChange_AfterGuardianStateChanges(address)": FunctionFragment;
    "testArrayHelpers()": FunctionFragment;
    "testBaseTest()": FunctionFragment;
    "testBurn(address)": FunctionFragment;
    "testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(address)": FunctionFragment;
    "testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled()": FunctionFragment;
    "testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled(address)": FunctionFragment;
    "testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled()": FunctionFragment;
    "testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(address)": FunctionFragment;
    "testCan_approve_ifNonEOA()": FunctionFragment;
    "testCan_burn_ifNonEOA()": FunctionFragment;
    "testCan_safeTransferFrom_ifNonEOA()": FunctionFragment;
    "testCan_setApprovalForAll_ifNonEOA()": FunctionFragment;
    "testCan_transferFrom_ifNonEOA()": FunctionFragment;
    "testCannotGetMintTimestampOf_UnexistentToken(uint256)": FunctionFragment;
    "testCannotSafeTransferFrom_SenderNotOwnerOrApproved(address,address,address)": FunctionFragment;
    "testCannotSafeTransferFrom_WrongFromParameter_SenderOwner(address,address,address)": FunctionFragment;
    "testCannotSetRoyaltiesIf_ExceedsBasisPoints(uint256)": FunctionFragment;
    "testCannotSetRoyaltiesIf_NotGovernance(address,uint256)": FunctionFragment;
    "testCannotTransferFrom_WrongFromParameter_SenderOwner(address,address,address)": FunctionFragment;
    "testCannot_ApproveForAll_IfOperatorIsTheSender(address,bool)": FunctionFragment;
    "testCannot_Approve_NotMinted(uint256,address)": FunctionFragment;
    "testCannot_Approve_ToOwner(address)": FunctionFragment;
    "testCannot_Approve_Unauthorized(address,address,address)": FunctionFragment;
    "testCannot_BalanceOfZeroAddress()": FunctionFragment;
    "testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll(address,address)": FunctionFragment;
    "testCannot_Burn_NotMinted(uint256)": FunctionFragment;
    "testCannot_DisableGuardian_MultipleTimes(uint256)": FunctionFragment;
    "testCannot_DoubleBurn(address)": FunctionFragment;
    "testCannot_EnableGuardian_IfAlreadyEnabled()": FunctionFragment;
    "testCannot_GetApproved_OfNonexistingToken(uint256)": FunctionFragment;
    "testCannot_GetTokenDataOf_NonexistingToken(uint256)": FunctionFragment;
    "testCannot_GetTokenURI_IfDoesNotExist(uint256)": FunctionFragment;
    "testCannot_MintToZero(uint256)": FunctionFragment;
    "testCannot_OwnerOfUnminted(uint256)": FunctionFragment;
    "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData(address,uint32)": FunctionFragment;
    "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData(address,uint32,uint256)": FunctionFragment;
    "testCannot_SafeTransferFrom_ToNonERC721Recipient(address)": FunctionFragment;
    "testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData(address)": FunctionFragment;
    "testCannot_SafeTransferFrom_ToRevertingERC721Recipient(address)": FunctionFragment;
    "testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData(address)": FunctionFragment;
    "testCannot_TransferFrom_NonexistingToken(uint256,address,address)": FunctionFragment;
    "testCannot_TransferFrom_NotOwner(address,address,address)": FunctionFragment;
    "testCannot_TransferFrom_ToZero(address)": FunctionFragment;
    "testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(uint256)": FunctionFragment;
    "testCannot_approve_ifEOA_andTokenGuardianEnabled()": FunctionFragment;
    "testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(uint256)": FunctionFragment;
    "testCannot_burn_ifEOA_andTokenGuardianEnabled()": FunctionFragment;
    "testCannot_disableTokenGuardian_ifNonEOA()": FunctionFragment;
    "testCannot_enableTokenGuardian_ifNonEOA()": FunctionFragment;
    "testCannot_getBalanceOfAddressZero()": FunctionFragment;
    "testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(uint256,address)": FunctionFragment;
    "testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled(address)": FunctionFragment;
    "testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(uint256)": FunctionFragment;
    "testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled()": FunctionFragment;
    "testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(uint256,address)": FunctionFragment;
    "testCannot_transferFrom_ifEOA_andTokenGuardianEnabled(address)": FunctionFragment;
    "testContractAddressesLoaderDeployer()": FunctionFragment;
    "testDefaultRoyaltiesAreSetToZero(uint256,uint256)": FunctionFragment;
    "testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown()": FunctionFragment;
    "testDisablingProtection_emitsExpectedEvent()": FunctionFragment;
    "testDoesNotSupportOtherThanTheExpectedInterfaces(uint32)": FunctionFragment;
    "testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled(uint256)": FunctionFragment;
    "testEnableProtection_timestampMustBeResetTo0()": FunctionFragment;
    "testEnablingProtection_emitsExpectedEvent()": FunctionFragment;
    "testForkManagement()": FunctionFragment;
    "testGetDomainSeparator()": FunctionFragment;
    "testGetTokenURI()": FunctionFragment;
    "testGetTokenURI_Fuzz()": FunctionFragment;
    "testKeyExists()": FunctionFragment;
    "testMint(address)": FunctionFragment;
    "testMintTimestampIsTheExpectedOne(uint32,address)": FunctionFragment;
    "testProfileNFTTest()": FunctionFragment;
    "testSafeTransferFromToEOA(address,address,address)": FunctionFragment;
    "testSafeTransferFromToERC721Recipient(address,address)": FunctionFragment;
    "testSafeTransferFromToERC721RecipientWithData(address,address)": FunctionFragment;
    "testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(address)": FunctionFragment;
    "testSetRoyalties(uint256,uint256,uint256)": FunctionFragment;
    "testSupportsErc2981Interface()": FunctionFragment;
    "testSupportsExpectedInterfaces()": FunctionFragment;
    "testTestSetup()": FunctionFragment;
    "testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled()": FunctionFragment;
    "testTotalSupply(address)": FunctionFragment;
    "testTransferFrom_SenderIsApproved(address,address,address)": FunctionFragment;
    "testTransferFrom_SenderIsApprovedForAll(address,address,address)": FunctionFragment;
    "testTransferFrom_SenderIsTheOwner(address,address)": FunctionFragment;
    "testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(address)": FunctionFragment;
    "testTransfersDoNotAffectProtectionState_OutboundTransfer(address)": FunctionFragment;
    "testTransfersDoesNotAffectProtectionState_InboundTransfer(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "keyExists"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetSelectors"
      | "targetSenders"
      | "testApprovalStateDoesNotChange_afterProtectionStateChanges"
      | "testApprove"
      | "testApproveAll"
      | "testApproveForAllState_DoesNotChange_AfterGuardianStateChanges"
      | "testArrayHelpers"
      | "testBaseTest"
      | "testBurn"
      | "testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled"
      | "testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled"
      | "testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled"
      | "testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled"
      | "testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled"
      | "testCan_approve_ifNonEOA"
      | "testCan_burn_ifNonEOA"
      | "testCan_safeTransferFrom_ifNonEOA"
      | "testCan_setApprovalForAll_ifNonEOA"
      | "testCan_transferFrom_ifNonEOA"
      | "testCannotGetMintTimestampOf_UnexistentToken"
      | "testCannotSafeTransferFrom_SenderNotOwnerOrApproved"
      | "testCannotSafeTransferFrom_WrongFromParameter_SenderOwner"
      | "testCannotSetRoyaltiesIf_ExceedsBasisPoints"
      | "testCannotSetRoyaltiesIf_NotGovernance"
      | "testCannotTransferFrom_WrongFromParameter_SenderOwner"
      | "testCannot_ApproveForAll_IfOperatorIsTheSender"
      | "testCannot_Approve_NotMinted"
      | "testCannot_Approve_ToOwner"
      | "testCannot_Approve_Unauthorized"
      | "testCannot_BalanceOfZeroAddress"
      | "testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll"
      | "testCannot_Burn_NotMinted"
      | "testCannot_DisableGuardian_MultipleTimes"
      | "testCannot_DoubleBurn"
      | "testCannot_EnableGuardian_IfAlreadyEnabled"
      | "testCannot_GetApproved_OfNonexistingToken"
      | "testCannot_GetTokenDataOf_NonexistingToken"
      | "testCannot_GetTokenURI_IfDoesNotExist"
      | "testCannot_MintToZero"
      | "testCannot_OwnerOfUnminted"
      | "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData"
      | "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData"
      | "testCannot_SafeTransferFrom_ToNonERC721Recipient"
      | "testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData"
      | "testCannot_SafeTransferFrom_ToRevertingERC721Recipient"
      | "testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData"
      | "testCannot_TransferFrom_NonexistingToken"
      | "testCannot_TransferFrom_NotOwner"
      | "testCannot_TransferFrom_ToZero"
      | "testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet"
      | "testCannot_approve_ifEOA_andTokenGuardianEnabled"
      | "testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet"
      | "testCannot_burn_ifEOA_andTokenGuardianEnabled"
      | "testCannot_disableTokenGuardian_ifNonEOA"
      | "testCannot_enableTokenGuardian_ifNonEOA"
      | "testCannot_getBalanceOfAddressZero"
      | "testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet"
      | "testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled"
      | "testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet"
      | "testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled"
      | "testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet"
      | "testCannot_transferFrom_ifEOA_andTokenGuardianEnabled"
      | "testContractAddressesLoaderDeployer"
      | "testDefaultRoyaltiesAreSetToZero"
      | "testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown"
      | "testDisablingProtection_emitsExpectedEvent"
      | "testDoesNotSupportOtherThanTheExpectedInterfaces"
      | "testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled"
      | "testEnableProtection_timestampMustBeResetTo0"
      | "testEnablingProtection_emitsExpectedEvent"
      | "testForkManagement"
      | "testGetDomainSeparator"
      | "testGetTokenURI"
      | "testGetTokenURI_Fuzz"
      | "testKeyExists"
      | "testMint"
      | "testMintTimestampIsTheExpectedOne"
      | "testProfileNFTTest"
      | "testSafeTransferFromToEOA"
      | "testSafeTransferFromToERC721Recipient"
      | "testSafeTransferFromToERC721RecipientWithData"
      | "testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled"
      | "testSetRoyalties"
      | "testSupportsErc2981Interface"
      | "testSupportsExpectedInterfaces"
      | "testTestSetup"
      | "testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled"
      | "testTotalSupply"
      | "testTransferFrom_SenderIsApproved"
      | "testTransferFrom_SenderIsApprovedForAll"
      | "testTransferFrom_SenderIsTheOwner"
      | "testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled"
      | "testTransfersDoNotAffectProtectionState_OutboundTransfer"
      | "testTransfersDoesNotAffectProtectionState_InboundTransfer"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keyExists",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testApprovalStateDoesNotChange_afterProtectionStateChanges",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testApprove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testApproveAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testApproveForAllState_DoesNotChange_AfterGuardianStateChanges",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testArrayHelpers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBaseTest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "testBurn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCan_approve_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCan_burn_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCan_safeTransferFrom_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCan_setApprovalForAll_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCan_transferFrom_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotGetMintTimestampOf_UnexistentToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotSafeTransferFrom_SenderNotOwnerOrApproved",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotSafeTransferFrom_WrongFromParameter_SenderOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotSetRoyaltiesIf_ExceedsBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotSetRoyaltiesIf_NotGovernance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannotTransferFrom_WrongFromParameter_SenderOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_ApproveForAll_IfOperatorIsTheSender",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_Approve_NotMinted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_Approve_ToOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_Approve_Unauthorized",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_BalanceOfZeroAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_Burn_NotMinted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_DisableGuardian_MultipleTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_DoubleBurn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_EnableGuardian_IfAlreadyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_GetApproved_OfNonexistingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_GetTokenDataOf_NonexistingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_GetTokenURI_IfDoesNotExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_MintToZero",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_OwnerOfUnminted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_SafeTransferFrom_ToNonERC721Recipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_SafeTransferFrom_ToRevertingERC721Recipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_TransferFrom_NonexistingToken",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_TransferFrom_NotOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_TransferFrom_ToZero",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_approve_ifEOA_andTokenGuardianEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_burn_ifEOA_andTokenGuardianEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_disableTokenGuardian_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_enableTokenGuardian_ifNonEOA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_getBalanceOfAddressZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testCannot_transferFrom_ifEOA_andTokenGuardianEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testContractAddressesLoaderDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDefaultRoyaltiesAreSetToZero",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDisablingProtection_emitsExpectedEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDoesNotSupportOtherThanTheExpectedInterfaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testEnableProtection_timestampMustBeResetTo0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testEnablingProtection_emitsExpectedEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testForkManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetTokenURI_Fuzz",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testKeyExists",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "testMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "testMintTimestampIsTheExpectedOne",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testProfileNFTTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeTransferFromToEOA",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeTransferFromToERC721Recipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeTransferFromToERC721RecipientWithData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testSetRoyalties",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSupportsErc2981Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSupportsExpectedInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTestSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTotalSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferFrom_SenderIsApproved",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferFrom_SenderIsApprovedForAll",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferFrom_SenderIsTheOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransfersDoNotAffectProtectionState_OutboundTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransfersDoesNotAffectProtectionState_InboundTransfer",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testApprovalStateDoesNotChange_afterProtectionStateChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testApproveAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testApproveForAllState_DoesNotChange_AfterGuardianStateChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testArrayHelpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBaseTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCan_approve_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCan_burn_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCan_safeTransferFrom_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCan_setApprovalForAll_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCan_transferFrom_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotGetMintTimestampOf_UnexistentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotSafeTransferFrom_SenderNotOwnerOrApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotSafeTransferFrom_WrongFromParameter_SenderOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotSetRoyaltiesIf_ExceedsBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotSetRoyaltiesIf_NotGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannotTransferFrom_WrongFromParameter_SenderOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_ApproveForAll_IfOperatorIsTheSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_Approve_NotMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_Approve_ToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_Approve_Unauthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_BalanceOfZeroAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_Burn_NotMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_DisableGuardian_MultipleTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_DoubleBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_EnableGuardian_IfAlreadyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_GetApproved_OfNonexistingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_GetTokenDataOf_NonexistingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_GetTokenURI_IfDoesNotExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_MintToZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_OwnerOfUnminted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_SafeTransferFrom_ToNonERC721Recipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_SafeTransferFrom_ToRevertingERC721Recipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_TransferFrom_NonexistingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_TransferFrom_NotOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_TransferFrom_ToZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_approve_ifEOA_andTokenGuardianEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_burn_ifEOA_andTokenGuardianEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_disableTokenGuardian_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_enableTokenGuardian_ifNonEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_getBalanceOfAddressZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCannot_transferFrom_ifEOA_andTokenGuardianEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testContractAddressesLoaderDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDefaultRoyaltiesAreSetToZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDisablingProtection_emitsExpectedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDoesNotSupportOtherThanTheExpectedInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEnableProtection_timestampMustBeResetTo0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEnablingProtection_emitsExpectedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testForkManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetTokenURI_Fuzz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testKeyExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testMintTimestampIsTheExpectedOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testProfileNFTTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeTransferFromToEOA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeTransferFromToERC721Recipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeTransferFromToERC721RecipientWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSetRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSupportsErc2981Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSupportsExpectedInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTestSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferFrom_SenderIsApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferFrom_SenderIsApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferFrom_SenderIsTheOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransfersDoNotAffectProtectionState_OutboundTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransfersDoesNotAffectProtectionState_InboundTransfer",
    data: BytesLike
  ): Result;

  events: {
    "TokenGuardianStateChanged(address,bool,uint256,uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenGuardianStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface TokenGuardianStateChangedEventObject {
  wallet: string;
  enabled: boolean;
  tokenGuardianDisablingTimestamp: BigNumber;
  timestamp: BigNumber;
}
export type TokenGuardianStateChangedEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber],
  TokenGuardianStateChangedEventObject
>;

export type TokenGuardianStateChangedEventFilter =
  TypedEventFilter<TokenGuardianStateChangedEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface ProfileNFTTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProfileNFTTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    keyExists(
      json: string,
      key: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    testApprovalStateDoesNotChange_afterProtectionStateChanges(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testApprove(
      owner: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testApproveAll(
      msgSender: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testApproveForAllState_DoesNotChange_AfterGuardianStateChanges(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testArrayHelpers(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testBaseTest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testBurn(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled(
      addressToRevokeApproval: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCan_approve_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCan_burn_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCan_safeTransferFrom_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCan_setApprovalForAll_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCan_transferFrom_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotGetMintTimestampOf_UnexistentToken(
      unexistentTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotSafeTransferFrom_SenderNotOwnerOrApproved(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotSafeTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotSetRoyaltiesIf_ExceedsBasisPoints(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotSetRoyaltiesIf_NotGovernance(
      nonGovernanceAddress: string,
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannotTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_ApproveForAll_IfOperatorIsTheSender(
      operatorAndSender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_Approve_NotMinted(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_Approve_ToOwner(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_Approve_Unauthorized(
      to: string,
      unauthorizedCaller: string,
      approveTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_BalanceOfZeroAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll(
      owner: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_Burn_NotMinted(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_DisableGuardian_MultipleTimes(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_DoubleBurn(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_EnableGuardian_IfAlreadyEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_GetApproved_OfNonexistingToken(
      nonExistingTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_GetTokenDataOf_NonexistingToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_GetTokenURI_IfDoesNotExist(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_MintToZero(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_OwnerOfUnminted(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData(
      owner: string,
      wrongReturnData: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData(
      owner: string,
      wrongReturnData: BigNumberish,
      dataToEncode: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_TransferFrom_NonexistingToken(
      tokenId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_TransferFrom_NotOwner(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_TransferFrom_ToZero(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_approve_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_burn_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_disableTokenGuardian_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_enableTokenGuardian_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_getBalanceOfAddressZero(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testCannot_transferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testContractAddressesLoaderDeployer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDefaultRoyaltiesAreSetToZero(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDisablingProtection_emitsExpectedEvent(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDoesNotSupportOtherThanTheExpectedInterfaces(
      interfaceId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testEnableProtection_timestampMustBeResetTo0(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testEnablingProtection_emitsExpectedEvent(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testForkManagement(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetDomainSeparator(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetTokenURI(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetTokenURI_Fuzz(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testKeyExists(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testMint(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testMintTimestampIsTheExpectedOne(
      blockTimestamp: BigNumberish,
      nftRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testProfileNFTTest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSafeTransferFromToEOA(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSafeTransferFromToERC721Recipient(
      owner: string,
      approvedTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSafeTransferFromToERC721RecipientWithData(
      owner: string,
      approvedTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSetRoyalties(
      royaltiesInBasisPoints: BigNumberish,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSupportsErc2981Interface(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSupportsExpectedInterfaces(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTotalSupply(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTransferFrom_SenderIsApproved(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTransferFrom_SenderIsApprovedForAll(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTransferFrom_SenderIsTheOwner(
      owner: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTransfersDoNotAffectProtectionState_OutboundTransfer(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTransfersDoesNotAffectProtectionState_InboundTransfer(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  keyExists(
    json: string,
    key: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  testApprovalStateDoesNotChange_afterProtectionStateChanges(
    anotherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testApprove(
    owner: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testApproveAll(
    msgSender: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testApproveForAllState_DoesNotChange_AfterGuardianStateChanges(
    anotherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testArrayHelpers(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testBaseTest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testBurn(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
    addressToApprove: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled(
    addressToRevokeApproval: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
    addressToApprove: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCan_approve_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCan_burn_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCan_safeTransferFrom_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCan_setApprovalForAll_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCan_transferFrom_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotGetMintTimestampOf_UnexistentToken(
    unexistentTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotSafeTransferFrom_SenderNotOwnerOrApproved(
    owner: string,
    to: string,
    otherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotSafeTransferFrom_WrongFromParameter_SenderOwner(
    owner: string,
    from: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotSetRoyaltiesIf_ExceedsBasisPoints(
    royaltiesInBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotSetRoyaltiesIf_NotGovernance(
    nonGovernanceAddress: string,
    royaltiesInBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannotTransferFrom_WrongFromParameter_SenderOwner(
    owner: string,
    from: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_ApproveForAll_IfOperatorIsTheSender(
    operatorAndSender: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_Approve_NotMinted(
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_Approve_ToOwner(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_Approve_Unauthorized(
    to: string,
    unauthorizedCaller: string,
    approveTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_BalanceOfZeroAddress(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll(
    owner: string,
    otherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_Burn_NotMinted(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_DisableGuardian_MultipleTimes(
    elapsedTimeAfterDisabling: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_DoubleBurn(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_EnableGuardian_IfAlreadyEnabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_GetApproved_OfNonexistingToken(
    nonExistingTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_GetTokenDataOf_NonexistingToken(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_GetTokenURI_IfDoesNotExist(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_MintToZero(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_OwnerOfUnminted(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData(
    owner: string,
    wrongReturnData: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData(
    owner: string,
    wrongReturnData: BigNumberish,
    dataToEncode: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_SafeTransferFrom_ToNonERC721Recipient(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_SafeTransferFrom_ToRevertingERC721Recipient(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_TransferFrom_NonexistingToken(
    tokenId: BigNumberish,
    from: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_TransferFrom_NotOwner(
    owner: string,
    to: string,
    otherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_TransferFrom_ToZero(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
    elapsedTimeAfterDisabling: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_approve_ifEOA_andTokenGuardianEnabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
    elapsedTimeAfterDisabling: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_burn_ifEOA_andTokenGuardianEnabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_disableTokenGuardian_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_enableTokenGuardian_ifNonEOA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_getBalanceOfAddressZero(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
    elapsedTimeAfterDisabling: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
    elapsedTimeAfterDisabling: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
    elapsedTimeAfterDisabling: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testCannot_transferFrom_ifEOA_andTokenGuardianEnabled(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testContractAddressesLoaderDeployer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDefaultRoyaltiesAreSetToZero(
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDisablingProtection_emitsExpectedEvent(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDoesNotSupportOtherThanTheExpectedInterfaces(
    interfaceId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled(
    elapsedTimeAfterDisabling: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testEnableProtection_timestampMustBeResetTo0(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testEnablingProtection_emitsExpectedEvent(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testForkManagement(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetDomainSeparator(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetTokenURI(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetTokenURI_Fuzz(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testKeyExists(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testMint(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testMintTimestampIsTheExpectedOne(
    blockTimestamp: BigNumberish,
    nftRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testProfileNFTTest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSafeTransferFromToEOA(
    owner: string,
    approvedTo: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSafeTransferFromToERC721Recipient(
    owner: string,
    approvedTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSafeTransferFromToERC721RecipientWithData(
    owner: string,
    approvedTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSetRoyalties(
    royaltiesInBasisPoints: BigNumberish,
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSupportsErc2981Interface(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSupportsExpectedInterfaces(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTestSetup(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTotalSupply(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTransferFrom_SenderIsApproved(
    owner: string,
    approvedTo: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTransferFrom_SenderIsApprovedForAll(
    owner: string,
    approvedTo: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTransferFrom_SenderIsTheOwner(
    owner: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTransfersDoNotAffectProtectionState_OutboundTransfer(
    anotherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTransfersDoesNotAffectProtectionState_InboundTransfer(
    anotherAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    keyExists(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    testApprovalStateDoesNotChange_afterProtectionStateChanges(
      anotherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testApprove(
      owner: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testApproveAll(
      msgSender: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testApproveForAllState_DoesNotChange_AfterGuardianStateChanges(
      anotherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testArrayHelpers(overrides?: CallOverrides): Promise<void>;

    testBaseTest(overrides?: CallOverrides): Promise<void>;

    testBurn(owner: string, overrides?: CallOverrides): Promise<void>;

    testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled(
      addressToRevokeApproval: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCan_approve_ifNonEOA(overrides?: CallOverrides): Promise<void>;

    testCan_burn_ifNonEOA(overrides?: CallOverrides): Promise<void>;

    testCan_safeTransferFrom_ifNonEOA(overrides?: CallOverrides): Promise<void>;

    testCan_setApprovalForAll_ifNonEOA(
      overrides?: CallOverrides
    ): Promise<void>;

    testCan_transferFrom_ifNonEOA(overrides?: CallOverrides): Promise<void>;

    testCannotGetMintTimestampOf_UnexistentToken(
      unexistentTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotSafeTransferFrom_SenderNotOwnerOrApproved(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotSafeTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotSetRoyaltiesIf_ExceedsBasisPoints(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotSetRoyaltiesIf_NotGovernance(
      nonGovernanceAddress: string,
      royaltiesInBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannotTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_ApproveForAll_IfOperatorIsTheSender(
      operatorAndSender: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_Approve_NotMinted(
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_Approve_ToOwner(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_Approve_Unauthorized(
      to: string,
      unauthorizedCaller: string,
      approveTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_BalanceOfZeroAddress(overrides?: CallOverrides): Promise<void>;

    testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll(
      owner: string,
      otherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_Burn_NotMinted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_DisableGuardian_MultipleTimes(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_DoubleBurn(to: string, overrides?: CallOverrides): Promise<void>;

    testCannot_EnableGuardian_IfAlreadyEnabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_GetApproved_OfNonexistingToken(
      nonExistingTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_GetTokenDataOf_NonexistingToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_GetTokenURI_IfDoesNotExist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_MintToZero(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_OwnerOfUnminted(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData(
      owner: string,
      wrongReturnData: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData(
      owner: string,
      wrongReturnData: BigNumberish,
      dataToEncode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_TransferFrom_NonexistingToken(
      tokenId: BigNumberish,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_TransferFrom_NotOwner(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_TransferFrom_ToZero(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_approve_ifEOA_andTokenGuardianEnabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_burn_ifEOA_andTokenGuardianEnabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_disableTokenGuardian_ifNonEOA(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_enableTokenGuardian_ifNonEOA(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_getBalanceOfAddressZero(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testCannot_transferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testContractAddressesLoaderDeployer(
      overrides?: CallOverrides
    ): Promise<void>;

    testDefaultRoyaltiesAreSetToZero(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown(
      overrides?: CallOverrides
    ): Promise<void>;

    testDisablingProtection_emitsExpectedEvent(
      overrides?: CallOverrides
    ): Promise<void>;

    testDoesNotSupportOtherThanTheExpectedInterfaces(
      interfaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testEnableProtection_timestampMustBeResetTo0(
      overrides?: CallOverrides
    ): Promise<void>;

    testEnablingProtection_emitsExpectedEvent(
      overrides?: CallOverrides
    ): Promise<void>;

    testForkManagement(overrides?: CallOverrides): Promise<void>;

    testGetDomainSeparator(overrides?: CallOverrides): Promise<void>;

    testGetTokenURI(overrides?: CallOverrides): Promise<void>;

    testGetTokenURI_Fuzz(overrides?: CallOverrides): Promise<void>;

    testKeyExists(overrides?: CallOverrides): Promise<void>;

    testMint(to: string, overrides?: CallOverrides): Promise<void>;

    testMintTimestampIsTheExpectedOne(
      blockTimestamp: BigNumberish,
      nftRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testProfileNFTTest(overrides?: CallOverrides): Promise<void>;

    testSafeTransferFromToEOA(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testSafeTransferFromToERC721Recipient(
      owner: string,
      approvedTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testSafeTransferFromToERC721RecipientWithData(
      owner: string,
      approvedTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testSetRoyalties(
      royaltiesInBasisPoints: BigNumberish,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testSupportsErc2981Interface(overrides?: CallOverrides): Promise<void>;

    testSupportsExpectedInterfaces(overrides?: CallOverrides): Promise<void>;

    testTestSetup(overrides?: CallOverrides): Promise<void>;

    testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled(
      overrides?: CallOverrides
    ): Promise<void>;

    testTotalSupply(to: string, overrides?: CallOverrides): Promise<void>;

    testTransferFrom_SenderIsApproved(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testTransferFrom_SenderIsApprovedForAll(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testTransferFrom_SenderIsTheOwner(
      owner: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testTransfersDoNotAffectProtectionState_OutboundTransfer(
      anotherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testTransfersDoesNotAffectProtectionState_InboundTransfer(
      anotherAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokenGuardianStateChanged(address,bool,uint256,uint256)"(
      wallet?: string | null,
      enabled?: boolean | null,
      tokenGuardianDisablingTimestamp?: null,
      timestamp?: null
    ): TokenGuardianStateChangedEventFilter;
    TokenGuardianStateChanged(
      wallet?: string | null,
      enabled?: boolean | null,
      tokenGuardianDisablingTimestamp?: null,
      timestamp?: null
    ): TokenGuardianStateChangedEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    keyExists(
      json: string,
      key: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    testApprovalStateDoesNotChange_afterProtectionStateChanges(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testApprove(
      owner: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testApproveAll(
      msgSender: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testApproveForAllState_DoesNotChange_AfterGuardianStateChanges(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testArrayHelpers(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testBaseTest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testBurn(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled(
      addressToRevokeApproval: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCan_approve_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCan_burn_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCan_safeTransferFrom_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCan_setApprovalForAll_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCan_transferFrom_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotGetMintTimestampOf_UnexistentToken(
      unexistentTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotSafeTransferFrom_SenderNotOwnerOrApproved(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotSafeTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotSetRoyaltiesIf_ExceedsBasisPoints(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotSetRoyaltiesIf_NotGovernance(
      nonGovernanceAddress: string,
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannotTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_ApproveForAll_IfOperatorIsTheSender(
      operatorAndSender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_Approve_NotMinted(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_Approve_ToOwner(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_Approve_Unauthorized(
      to: string,
      unauthorizedCaller: string,
      approveTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_BalanceOfZeroAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll(
      owner: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_Burn_NotMinted(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_DisableGuardian_MultipleTimes(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_DoubleBurn(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_EnableGuardian_IfAlreadyEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_GetApproved_OfNonexistingToken(
      nonExistingTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_GetTokenDataOf_NonexistingToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_GetTokenURI_IfDoesNotExist(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_MintToZero(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_OwnerOfUnminted(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData(
      owner: string,
      wrongReturnData: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData(
      owner: string,
      wrongReturnData: BigNumberish,
      dataToEncode: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_TransferFrom_NonexistingToken(
      tokenId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_TransferFrom_NotOwner(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_TransferFrom_ToZero(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_approve_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_burn_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_disableTokenGuardian_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_enableTokenGuardian_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_getBalanceOfAddressZero(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testCannot_transferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testContractAddressesLoaderDeployer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDefaultRoyaltiesAreSetToZero(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDisablingProtection_emitsExpectedEvent(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDoesNotSupportOtherThanTheExpectedInterfaces(
      interfaceId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testEnableProtection_timestampMustBeResetTo0(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testEnablingProtection_emitsExpectedEvent(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testForkManagement(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetDomainSeparator(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetTokenURI(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetTokenURI_Fuzz(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testKeyExists(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testMint(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testMintTimestampIsTheExpectedOne(
      blockTimestamp: BigNumberish,
      nftRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testProfileNFTTest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSafeTransferFromToEOA(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSafeTransferFromToERC721Recipient(
      owner: string,
      approvedTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSafeTransferFromToERC721RecipientWithData(
      owner: string,
      approvedTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSetRoyalties(
      royaltiesInBasisPoints: BigNumberish,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSupportsErc2981Interface(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSupportsExpectedInterfaces(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTotalSupply(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTransferFrom_SenderIsApproved(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTransferFrom_SenderIsApprovedForAll(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTransferFrom_SenderIsTheOwner(
      owner: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTransfersDoNotAffectProtectionState_OutboundTransfer(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTransfersDoesNotAffectProtectionState_InboundTransfer(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    keyExists(
      json: string,
      key: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testApprovalStateDoesNotChange_afterProtectionStateChanges(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testApprove(
      owner: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testApproveAll(
      msgSender: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testApproveForAllState_DoesNotChange_AfterGuardianStateChanges(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testArrayHelpers(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testBaseTest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testBurn(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanApprove_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanBurn_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanRemoveSetApprovalForAll_ifEOA_evenIfProtectionEnabled(
      addressToRevokeApproval: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanRevokaApproval_IfEOA_EvenWhenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCanSetApprovalForAll_ifEOA_onlyAfterTokenGuardianIs_EffectivelyDisabled(
      addressToApprove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCan_approve_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCan_burn_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCan_safeTransferFrom_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCan_setApprovalForAll_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCan_transferFrom_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotGetMintTimestampOf_UnexistentToken(
      unexistentTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotSafeTransferFrom_SenderNotOwnerOrApproved(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotSafeTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotSetRoyaltiesIf_ExceedsBasisPoints(
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotSetRoyaltiesIf_NotGovernance(
      nonGovernanceAddress: string,
      royaltiesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannotTransferFrom_WrongFromParameter_SenderOwner(
      owner: string,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_ApproveForAll_IfOperatorIsTheSender(
      operatorAndSender: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_Approve_NotMinted(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_Approve_ToOwner(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_Approve_Unauthorized(
      to: string,
      unauthorizedCaller: string,
      approveTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_BalanceOfZeroAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_Burn_NonOwner_NorApproved_NorApprovedForAll(
      owner: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_Burn_NotMinted(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_DisableGuardian_MultipleTimes(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_DoubleBurn(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_EnableGuardian_IfAlreadyEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_GetApproved_OfNonexistingToken(
      nonExistingTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_GetTokenDataOf_NonexistingToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_GetTokenURI_IfDoesNotExist(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_MintToZero(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_OwnerOfUnminted(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData(
      owner: string,
      wrongReturnData: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_SafeTransferFrom_ToERC721Recipient_WithWrongReturnData_WithData(
      owner: string,
      wrongReturnData: BigNumberish,
      dataToEncode: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_SafeTransferFrom_ToNonERC721Recipient_WithData(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_SafeTransferFrom_ToRevertingERC721Recipient_WithData(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_TransferFrom_NonexistingToken(
      tokenId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_TransferFrom_NotOwner(
      owner: string,
      to: string,
      otherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_TransferFrom_ToZero(
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_approve_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_approve_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_burn_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_burn_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_disableTokenGuardian_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_enableTokenGuardian_ifNonEOA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_getBalanceOfAddressZero(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_safeTransferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_setApprovalForAll_ifEOA_andTokenGuardianEnabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_transferFrom_ifEOA_andTokenGuardianDisabled_butNotTakenEffectYet(
      elapsedTimeAfterDisabling: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testCannot_transferFrom_ifEOA_andTokenGuardianEnabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testContractAddressesLoaderDeployer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDefaultRoyaltiesAreSetToZero(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDisableProtection_timestampMustBe_NowPlusTokenGuardianCooldown(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDisablingProtection_emitsExpectedEvent(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDoesNotSupportOtherThanTheExpectedInterfaces(
      interfaceId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testEnableProtection_afterDisabling_ButNotBeforeEffectivelyDisabled(
      elapsedTimeAfterDisabling: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testEnableProtection_timestampMustBeResetTo0(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testEnablingProtection_emitsExpectedEvent(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testForkManagement(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetDomainSeparator(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetTokenURI(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetTokenURI_Fuzz(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testKeyExists(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testMint(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testMintTimestampIsTheExpectedOne(
      blockTimestamp: BigNumberish,
      nftRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testProfileNFTTest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSafeTransferFromToEOA(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSafeTransferFromToERC721Recipient(
      owner: string,
      approvedTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSafeTransferFromToERC721RecipientWithData(
      owner: string,
      approvedTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSafeTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSetRoyalties(
      royaltiesInBasisPoints: BigNumberish,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSupportsErc2981Interface(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSupportsExpectedInterfaces(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTimestampResetsToZero_WhenEnabling_AfterBeingEffectivelyDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTotalSupply(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTransferFrom_SenderIsApproved(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTransferFrom_SenderIsApprovedForAll(
      owner: string,
      approvedTo: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTransferFrom_SenderIsTheOwner(
      owner: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTransferFrom_ifEOA_onlyAfterTokenGuardianIsEffectivelyDisabled(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTransfersDoNotAffectProtectionState_OutboundTransfer(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTransfersDoesNotAffectProtectionState_InboundTransfer(
      anotherAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
