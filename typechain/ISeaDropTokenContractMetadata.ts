/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ISeaDropTokenContractMetadata {
  export type RoyaltyInfoStruct = {
    royaltyAddress: string;
    royaltyBps: BigNumberish;
  };

  export type RoyaltyInfoStructOutput = [string, BigNumber] & {
    royaltyAddress: string;
    royaltyBps: BigNumber;
  };
}

export interface ISeaDropTokenContractMetadataInterface
  extends utils.Interface {
  functions: {
    "baseURI()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "provenanceHash()": FunctionFragment;
    "royaltyAddress()": FunctionFragment;
    "royaltyBasisPoints()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "setProvenanceHash(bytes32)": FunctionFragment;
    "setRoyaltyInfo((address,uint96))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseURI"
      | "contractURI"
      | "maxSupply"
      | "provenanceHash"
      | "royaltyAddress"
      | "royaltyBasisPoints"
      | "royaltyInfo"
      | "setBaseURI"
      | "setContractURI"
      | "setMaxSupply"
      | "setProvenanceHash"
      | "setRoyaltyInfo"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provenanceHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvenanceHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyInfo",
    values: [ISeaDropTokenContractMetadata.RoyaltyInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provenanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProvenanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "ContractURIUpdated(string)": EventFragment;
    "MaxSupplyUpdated(uint256)": EventFragment;
    "ProvenanceHashUpdated(bytes32,bytes32)": EventFragment;
    "RoyaltyInfoUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvenanceHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyInfoUpdated"): EventFragment;
}

export interface BatchMetadataUpdateEventObject {
  _fromTokenId: BigNumber;
  _toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  BatchMetadataUpdateEventObject
>;

export type BatchMetadataUpdateEventFilter =
  TypedEventFilter<BatchMetadataUpdateEvent>;

export interface ContractURIUpdatedEventObject {
  newContractURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface MaxSupplyUpdatedEventObject {
  newMaxSupply: BigNumber;
}
export type MaxSupplyUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxSupplyUpdatedEventObject
>;

export type MaxSupplyUpdatedEventFilter =
  TypedEventFilter<MaxSupplyUpdatedEvent>;

export interface ProvenanceHashUpdatedEventObject {
  previousHash: string;
  newHash: string;
}
export type ProvenanceHashUpdatedEvent = TypedEvent<
  [string, string],
  ProvenanceHashUpdatedEventObject
>;

export type ProvenanceHashUpdatedEventFilter =
  TypedEventFilter<ProvenanceHashUpdatedEvent>;

export interface RoyaltyInfoUpdatedEventObject {
  receiver: string;
  bps: BigNumber;
}
export type RoyaltyInfoUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RoyaltyInfoUpdatedEventObject
>;

export type RoyaltyInfoUpdatedEventFilter =
  TypedEventFilter<RoyaltyInfoUpdatedEvent>;

export interface ISeaDropTokenContractMetadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISeaDropTokenContractMetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    provenanceHash(overrides?: CallOverrides): Promise<[string]>;

    royaltyAddress(overrides?: CallOverrides): Promise<[string]>;

    royaltyBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    setBaseURI(
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  provenanceHash(overrides?: CallOverrides): Promise<string>;

  royaltyAddress(overrides?: CallOverrides): Promise<string>;

  royaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  royaltyInfo(
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  setBaseURI(
    tokenURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    newMaxSupply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProvenanceHash(
    newProvenanceHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoyaltyInfo(
    newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    provenanceHash(overrides?: CallOverrides): Promise<string>;

    royaltyAddress(overrides?: CallOverrides): Promise<string>;

    royaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    setBaseURI(tokenURI: string, overrides?: CallOverrides): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;

    "ContractURIUpdated(string)"(
      newContractURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(newContractURI?: null): ContractURIUpdatedEventFilter;

    "MaxSupplyUpdated(uint256)"(
      newMaxSupply?: null
    ): MaxSupplyUpdatedEventFilter;
    MaxSupplyUpdated(newMaxSupply?: null): MaxSupplyUpdatedEventFilter;

    "ProvenanceHashUpdated(bytes32,bytes32)"(
      previousHash?: null,
      newHash?: null
    ): ProvenanceHashUpdatedEventFilter;
    ProvenanceHashUpdated(
      previousHash?: null,
      newHash?: null
    ): ProvenanceHashUpdatedEventFilter;

    "RoyaltyInfoUpdated(address,uint256)"(
      receiver?: null,
      bps?: null
    ): RoyaltyInfoUpdatedEventFilter;
    RoyaltyInfoUpdated(
      receiver?: null,
      bps?: null
    ): RoyaltyInfoUpdatedEventFilter;
  };

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    provenanceHash(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provenanceHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
