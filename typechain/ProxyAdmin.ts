/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProxyAdminInterface extends utils.Interface {
  functions: {
    "DIGI_HUB_PROXY()": FunctionFragment;
    "clearControllerContract()": FunctionFragment;
    "controllerContract()": FunctionFragment;
    "currentImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "previousImplementation()": FunctionFragment;
    "proxy_changeAdmin(address)": FunctionFragment;
    "proxy_upgrade(address)": FunctionFragment;
    "proxy_upgradeAndCall(address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rollbackLastUpgrade()": FunctionFragment;
    "setControllerContract(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DIGI_HUB_PROXY"
      | "clearControllerContract"
      | "controllerContract"
      | "currentImplementation"
      | "owner"
      | "previousImplementation"
      | "proxy_changeAdmin"
      | "proxy_upgrade"
      | "proxy_upgradeAndCall"
      | "renounceOwnership"
      | "rollbackLastUpgrade"
      | "setControllerContract"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DIGI_HUB_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearControllerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxy_changeAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxy_upgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxy_upgradeAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollbackLastUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DIGI_HUB_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearControllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxy_changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxy_upgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxy_upgradeAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollbackLastUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ControllerContractUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ControllerContractUpdatedEventObject {
  previousControllerContract: string;
  newControllerContract: string;
}
export type ControllerContractUpdatedEvent = TypedEvent<
  [string, string],
  ControllerContractUpdatedEventObject
>;

export type ControllerContractUpdatedEventFilter =
  TypedEventFilter<ControllerContractUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DIGI_HUB_PROXY(overrides?: CallOverrides): Promise<[string]>;

    clearControllerContract(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    controllerContract(overrides?: CallOverrides): Promise<[string]>;

    currentImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previousImplementation(overrides?: CallOverrides): Promise<[string]>;

    proxy_changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxy_upgrade(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxy_upgradeAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rollbackLastUpgrade(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setControllerContract(
      newControllerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DIGI_HUB_PROXY(overrides?: CallOverrides): Promise<string>;

  clearControllerContract(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  controllerContract(overrides?: CallOverrides): Promise<string>;

  currentImplementation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  previousImplementation(overrides?: CallOverrides): Promise<string>;

  proxy_changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxy_upgrade(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxy_upgradeAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rollbackLastUpgrade(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setControllerContract(
    newControllerContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DIGI_HUB_PROXY(overrides?: CallOverrides): Promise<string>;

    clearControllerContract(overrides?: CallOverrides): Promise<void>;

    controllerContract(overrides?: CallOverrides): Promise<string>;

    currentImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    previousImplementation(overrides?: CallOverrides): Promise<string>;

    proxy_changeAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proxy_upgrade(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proxy_upgradeAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rollbackLastUpgrade(overrides?: CallOverrides): Promise<void>;

    setControllerContract(
      newControllerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ControllerContractUpdated(address,address)"(
      previousControllerContract?: null,
      newControllerContract?: null
    ): ControllerContractUpdatedEventFilter;
    ControllerContractUpdated(
      previousControllerContract?: null,
      newControllerContract?: null
    ): ControllerContractUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DIGI_HUB_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    clearControllerContract(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    controllerContract(overrides?: CallOverrides): Promise<BigNumber>;

    currentImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previousImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    proxy_changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proxy_upgrade(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proxy_upgradeAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rollbackLastUpgrade(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setControllerContract(
      newControllerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DIGI_HUB_PROXY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearControllerContract(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    controllerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxy_changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxy_upgrade(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxy_upgradeAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rollbackLastUpgrade(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setControllerContract(
      newControllerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
