/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1271MaliciousMock,
  ERC1271MaliciousMockInterface,
} from "../../ERC1271WalletMock.sol/ERC1271MaliciousMock";

const _abi = [
  {
    type: "function",
    name: "isValidSignature",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "pure",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610104908161001c8239f35b600080fdfe60806040526004361015601157600080fd5b6000803560e01c631626ba7e14602657600080fd5b3460a957604036600319011260a9576024356001600160401b0380821160a5573660238301121560a55781600401359080821160a15760405190601f8301601f19908116603f011682019081118282101760a1576040528181523660248385010111609d57816024602094018483013701015260c2565b8380fd5b60ac565b8280fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b60001960005260206000f3fea2646970667358221220e0a6e8dcd55dbde6f6181cdebd050b0213b181ccfb6c324e2366506c7e58ec8a64736f6c63430008150033";

type ERC1271MaliciousMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1271MaliciousMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1271MaliciousMock__factory extends ContractFactory {
  constructor(...args: ERC1271MaliciousMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ERC1271MaliciousMock> {
    return super.deploy(overrides || {}) as Promise<ERC1271MaliciousMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC1271MaliciousMock {
    return super.attach(address) as ERC1271MaliciousMock;
  }
  override connect(signer: Signer): ERC1271MaliciousMock__factory {
    return super.connect(signer) as ERC1271MaliciousMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1271MaliciousMockInterface {
    return new utils.Interface(_abi) as ERC1271MaliciousMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1271MaliciousMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1271MaliciousMock;
  }
}
