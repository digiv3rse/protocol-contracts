/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockControllableByContract,
  MockControllableByContractInterface,
} from "../../ControllableByContractTest.t.sol/MockControllableByContract";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "clearControllerContract",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "controllerContract",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "modifierRestricted",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setControllerContract",
    inputs: [
      {
        name: "newControllerContract",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testMockControllableByContract",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ControllerContractUpdated",
    inputs: [
      {
        name: "previousControllerContract",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newControllerContract",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60803461007057601f6104c138819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b0381168103610070576100619061005c3361008b565b61008b565b6040516103ee90816100d38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe608060408181526004908136101561001657600080fd5b600092833560e01c90816369aecbda146102cc57508063715018a6146102845780638da5cb5b1461025c5780638dfb5130146101f4578063b5a01c4e146101c7578063e6b286be146101b0578063ee1f715f146101365763f2fde38b1461007c57600080fd5b34610132576020366003190112610132576001600160a01b0382358181169391929084900361012e576100ad610320565b83156100dc57505082546001600160a01b0319811683178455166000805160206103998339815191528380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b503461013257826003193601126101325782546001600160a01b0392908316331415806101a2575b6101955750600080516020610379833981519152906001549281519084168152846020820152a16001600160a01b03191660015580f35b90516282b42960e81b8152fd5b50826001541633141561015e565b83346101c457806003193601126101c45780f35b80fd5b8382346101f057816003193601126101f05760015490516001600160a01b039091168152602090f35b5080fd5b509034610132576020366003190112610132576001600160a01b03903581811692908390036102585760008051602061037983398151915290610235610320565b6001549281519084168152846020820152a16001600160a01b0319161760015580f35b8380fd5b8382346101f057816003193601126101f057905490516001600160a01b039091168152602090f35b83346101c457806003193601126101c45761029d610320565b80546001600160a01b03198116825581906001600160a01b03166000805160206103998339815191528280a380f35b905083346101c457806003193601126101c45754336001600160a01b0391821614159081610311575b50610304576020825160018152f35b6282b42960e81b81529050fd5b905060015416331415846102f5565b6000546001600160a01b0316330361033457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe0d8ff93c45daabccf0c67a2b31c8c7639aae955b3aa46d128cd2bb4d98a686c18be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220382e68e299ab376d246c06834e91a494a79a5bd4a82f80c27def8e751ef1d51a64736f6c63430008150033";

type MockControllableByContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockControllableByContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockControllableByContract__factory extends ContractFactory {
  constructor(...args: MockControllableByContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockControllableByContract> {
    return super.deploy(
      owner,
      overrides || {}
    ) as Promise<MockControllableByContract>;
  }
  override getDeployTransaction(
    owner: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {});
  }
  override attach(address: string): MockControllableByContract {
    return super.attach(address) as MockControllableByContract;
  }
  override connect(signer: Signer): MockControllableByContract__factory {
    return super.connect(signer) as MockControllableByContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockControllableByContractInterface {
    return new utils.Interface(_abi) as MockControllableByContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockControllableByContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockControllableByContract;
  }
}
