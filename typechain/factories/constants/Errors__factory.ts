/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Errors, ErrorsInterface } from "../../constants/Errors";

const _abi = [
  {
    type: "error",
    name: "ActionNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "AlreadyEnabled",
    inputs: [],
  },
  {
    type: "error",
    name: "ArrayMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "Blocked",
    inputs: [],
  },
  {
    type: "error",
    name: "CallerNotCollectNFT",
    inputs: [],
  },
  {
    type: "error",
    name: "CallerNotFollowNFT",
    inputs: [],
  },
  {
    type: "error",
    name: "CannotInitImplementation",
    inputs: [],
  },
  {
    type: "error",
    name: "CollectNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "DisablingAlreadyTriggered",
    inputs: [],
  },
  {
    type: "error",
    name: "EmergencyAdminCanOnlyPauseFurther",
    inputs: [],
  },
  {
    type: "error",
    name: "ExecutorInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "GuardianEnabled",
    inputs: [],
  },
  {
    type: "error",
    name: "InitParamsInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "Initialized",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidParameter",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPointedPub",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReferrer",
    inputs: [],
  },
  {
    type: "error",
    name: "NonERC721ReceiverImplementer",
    inputs: [],
  },
  {
    type: "error",
    name: "NotEOA",
    inputs: [],
  },
  {
    type: "error",
    name: "NotFollowing",
    inputs: [],
  },
  {
    type: "error",
    name: "NotGovernance",
    inputs: [],
  },
  {
    type: "error",
    name: "NotGovernanceOrEmergencyAdmin",
    inputs: [],
  },
  {
    type: "error",
    name: "NotHub",
    inputs: [],
  },
  {
    type: "error",
    name: "NotMigrationAdmin",
    inputs: [],
  },
  {
    type: "error",
    name: "NotOwnerOrApproved",
    inputs: [],
  },
  {
    type: "error",
    name: "NotProfileOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NotRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "NotWhitelisted",
    inputs: [],
  },
  {
    type: "error",
    name: "Paused",
    inputs: [],
  },
  {
    type: "error",
    name: "PublicationDoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "PublishingPaused",
    inputs: [],
  },
  {
    type: "error",
    name: "SelfBlock",
    inputs: [],
  },
  {
    type: "error",
    name: "SelfFollow",
    inputs: [],
  },
  {
    type: "error",
    name: "SignatureExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "SignatureInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenDoesNotExist",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212203416bad194a794c5cd8bf3cca7f89bb4b8510353c13f7b7afd92a6e3fc6d351b64736f6c63430008150033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
