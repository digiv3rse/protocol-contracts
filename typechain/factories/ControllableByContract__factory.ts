/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ControllableByContract,
  ControllableByContractInterface,
} from "../ControllableByContract";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "owner_",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "clearControllerContract",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "controllerContract",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setControllerContract",
    inputs: [
      {
        name: "newControllerContract",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ControllerContractUpdated",
    inputs: [
      {
        name: "previousControllerContract",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newControllerContract",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60803461007057601f61043338819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b0381168103610070576100619061005c3361008b565b61008b565b60405161036090816100d38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe604060808152600436101561001357600080fd5b600090813560e01c8063715018a6146102475780638da5cb5b146102205780638dfb5130146101bc578063b5a01c4e14610194578063ee1f715f146101195763f2fde38b1461006157600080fd5b34610115576020366003190112610115576001600160a01b03600435818116929083900361011157610091610292565b82156100bf575082546001600160a01b03198116831784551660008051602061030b8339815191528380a380f35b5162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b8380fd5b5080fd5b503461011557816003193601126101155781546001600160a01b039190821633141580610186575b610177576000805160206102eb833981519152906001549281519084168152846020820152a16001600160a01b03191660015580f35b516282b42960e81b8152600490fd5b508160015416331415610141565b503461011557816003193601126101155760015490516001600160a01b039091168152602090f35b5034610115576020366003190112610115576001600160a01b036004358181169290839003610111576000805160206102eb833981519152906101fd610292565b6001549281519084168152846020820152a16001600160a01b0319161760015580f35b5034610115578160031936011261011557905490516001600160a01b039091168152602090f35b823461028f578060031936011261028f57610260610292565b80546001600160a01b03198116825581906001600160a01b031660008051602061030b8339815191528280a380f35b80fd5b6000546001600160a01b031633036102a657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe0d8ff93c45daabccf0c67a2b31c8c7639aae955b3aa46d128cd2bb4d98a686c18be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220ab69c1ed765519473ef52d7fe248e417419343f3e3381eefe6272552d00ea9ac64736f6c63430008150033";

type ControllableByContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllableByContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ControllableByContract__factory extends ContractFactory {
  constructor(...args: ControllableByContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ControllableByContract> {
    return super.deploy(
      owner_,
      overrides || {}
    ) as Promise<ControllableByContract>;
  }
  override getDeployTransaction(
    owner_: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(owner_, overrides || {});
  }
  override attach(address: string): ControllableByContract {
    return super.attach(address) as ControllableByContract;
  }
  override connect(signer: Signer): ControllableByContract__factory {
    return super.connect(signer) as ControllableByContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllableByContractInterface {
    return new utils.Interface(_abi) as ControllableByContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ControllableByContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ControllableByContract;
  }
}
