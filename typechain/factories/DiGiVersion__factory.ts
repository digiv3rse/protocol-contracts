/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DiGiVersion, DiGiVersionInterface } from "../DiGiVersion";

const _abi = [
  {
    type: "function",
    name: "emitVersion",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getGitCommit",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes20",
        internalType: "bytes20",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "getVersion",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "DiGiUpgradeVersion",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "version",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "gitCommit",
        type: "bytes20",
        indexed: false,
        internalType: "bytes20",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "NotHub",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610309908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c80630d8e6e2c1461019e5780632cf03735146101685763ac11641d1461003f57600080fd5b3461016557806003193601126101655781518180602092838101906303e1469160e61b82526004815261007181610213565b5190305af45080610080610265565b8380865184810190635c60da1b60e01b82526004815261009f81610213565b5190305af4506100ad610265565b81516001600160a01b0394919285926100cb928201019085016102af565b163303610154579361012b61010a8684807f903d8d46a765f3668b2a46c0f97dedf479fc10059bc4b289cdc75a9da1578b4198995183010191016102af565b926080610115610244565b91845196879616865285015260808401906101d3565b907303bb1438b28b69f584ab9a290f261e3452fd34ad60641b908301524260608301520390a180f35b84516313bd2e8360e31b8152600490fd5b80fd5b50903461019a578160031936011261019a57517303bb1438b28b69f584ab9a290f261e3452fd34ad60641b8152602090f35b5080fd5b50903461019a578160031936011261019a576101cf906101bc610244565b90519182916020835260208301906101d3565b0390f35b919082519283825260005b8481106101ff575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101de565b604081019081106001600160401b0382111761022e57604052565b634e487b7160e01b600052604160045260246000fd5b6040519061025182610213565b6005825264322e302e3360d81b6020830152565b3d156102aa576001600160401b03903d82811161022e5760405192601f8201601f19908116603f011684019081118482101761022e5760405282523d6000602084013e565b606090565b908160209103126102ce57516001600160a01b03811681036102ce5790565b600080fdfea264697066735822122066e18aa1022db024cf24f56305a52600d220f2cb0d282648d2b0729db8b9da7964736f6c63430008150033";

type DiGiVersionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiGiVersionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiGiVersion__factory extends ContractFactory {
  constructor(...args: DiGiVersionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DiGiVersion> {
    return super.deploy(overrides || {}) as Promise<DiGiVersion>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiGiVersion {
    return super.attach(address) as DiGiVersion;
  }
  override connect(signer: Signer): DiGiVersion__factory {
    return super.connect(signer) as DiGiVersion__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiGiVersionInterface {
    return new utils.Interface(_abi) as DiGiVersionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiGiVersion {
    return new Contract(address, _abi, signerOrProvider) as DiGiVersion;
  }
}
