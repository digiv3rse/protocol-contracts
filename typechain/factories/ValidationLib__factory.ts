/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ValidationLib, ValidationLibInterface } from "../ValidationLib";

const _abi = [
  {
    type: "function",
    name: "validateLegacyCollectReferrer",
    inputs: [
      {
        name: "referrerProfileId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "referrerPubId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "publicationCollectedProfileId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "publicationCollectedId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "view",
  },
  {
    type: "error",
    name: "InvalidReferrer",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080806040523461001a576101a09081610020823930815050f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c633f813a441461002857600080fd5b60803660031901126100bd5760043580825260026020526040822054602435906001600160a01b03161580156100a0575b61007d576100669161014f565b6044358154149081159161008f575b5061007d5780f35b604051630c22084560e31b8152600490fd5b600101546064351415905038610075565b5060036100ad82846100e0565b6100b6816100c0565b1415610059565b80fd5b600511156100ca57565b634e487b7160e01b600052602160045260246000fd5b906100ea9161014f565b600581015460a01c60ff16906100ff826100c0565b60ff82161561010c575090565b8054909190156101325750600401546001600160a01b031661012d57600390565b600290565b600491909101546001600160a01b03166101495790565b50600190565b6000526014602052604060002060205260005260406000209056fea264697066735822122002f2726cca98e18653724f12feb4a2b67bb57495010c3ebf68df26e16aa939d164736f6c63430008150033";

type ValidationLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidationLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidationLib__factory extends ContractFactory {
  constructor(...args: ValidationLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ValidationLib> {
    return super.deploy(overrides || {}) as Promise<ValidationLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ValidationLib {
    return super.attach(address) as ValidationLib;
  }
  override connect(signer: Signer): ValidationLib__factory {
    return super.connect(signer) as ValidationLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidationLibInterface {
    return new utils.Interface(_abi) as ValidationLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValidationLib {
    return new Contract(address, _abi, signerOrProvider) as ValidationLib;
  }
}
