/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibString, LibStringInterface } from "../LibString";

const _abi = [
  {
    type: "error",
    name: "HexLengthInsufficient",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212204d9c90969ac768749b8d64e7ce3cae33de40021d06b1a984aa2bb70e6de76a4264736f6c63430008150033";

type LibStringConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibStringConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibString__factory extends ContractFactory {
  constructor(...args: LibStringConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<LibString> {
    return super.deploy(overrides || {}) as Promise<LibString>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibString {
    return super.attach(address) as LibString;
  }
  override connect(signer: Signer): LibString__factory {
    return super.connect(signer) as LibString__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibStringInterface {
    return new utils.Interface(_abi) as LibStringInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibString {
    return new Contract(address, _abi, signerOrProvider) as LibString;
  }
}
