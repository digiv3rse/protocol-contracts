/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FollowNFT,
  FollowNFTInterface,
} from "../../FollowSVGGen.t.sol/FollowNFT";

const _abi = [
  {
    type: "function",
    name: "tryWithTokenId",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576101e2908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b6000803560e01c63e8ae31081461002a57600080fd5b3461012a576020908160031936011261012a5762121da160e41b84526004803590850152808460248173__$e8efa8b79168d45cb7784ec7d7234d671e$__5af49081156101455780916100a8575b5061009a93508251938285938452825192818480938701528686019101610150565b601f01601f19168101030190f35b90503d8082863e6100b98186610173565b840190828583031261012a5784516001600160401b039586821161014157019082601f8301121561012a57815195861161012d57845192610103601f8801601f1916860185610173565b86845284878401011161012a575061009a9461012491848085019101610150565b38610078565b80fd5b634e487b7160e01b81526041600452602490fd5b8280fd5b8351903d90823e3d90fd5b60005b8381106101635750506000910152565b8181015183820152602001610153565b601f909101601f19168101906001600160401b0382119082101761019657604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b0beed2fe0fdc9a4cd6eea6365053caca409cb3186ba729066e7902160e5d01f64736f6c63430008150033";

type FollowNFTConstructorParams =
  | [linkLibraryAddresses: FollowNFTLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FollowNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FollowNFT__factory extends ContractFactory {
  constructor(...args: FollowNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FollowNFT__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: FollowNFTLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e8efa8b79168d45cb7784ec7d7234d671e\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/svgs/Follow/FollowSVG.sol:FollowSVG"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<FollowNFT> {
    return super.deploy(overrides || {}) as Promise<FollowNFT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FollowNFT {
    return super.attach(address) as FollowNFT;
  }
  override connect(signer: Signer): FollowNFT__factory {
    return super.connect(signer) as FollowNFT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FollowNFTInterface {
    return new utils.Interface(_abi) as FollowNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FollowNFT {
    return new Contract(address, _abi, signerOrProvider) as FollowNFT;
  }
}

export interface FollowNFTLibraryAddresses {
  ["contracts/libraries/svgs/Follow/FollowSVG.sol:FollowSVG"]: string;
}
