/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RegistryEvents,
  RegistryEventsInterface,
} from "../../Events.sol/RegistryEvents";

const _abi = [
  {
    type: "event",
    name: "HandleLinked",
    inputs: [
      {
        name: "handle",
        type: "tuple",
        indexed: false,
        internalType: "struct RegistryTypes.Handle",
        components: [
          {
            name: "id",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "collection",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "token",
        type: "tuple",
        indexed: false,
        internalType: "struct RegistryTypes.Token",
        components: [
          {
            name: "id",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "collection",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "transactionExecutor",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "HandleUnlinked",
    inputs: [
      {
        name: "handle",
        type: "tuple",
        indexed: false,
        internalType: "struct RegistryTypes.Handle",
        components: [
          {
            name: "id",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "collection",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "token",
        type: "tuple",
        indexed: false,
        internalType: "struct RegistryTypes.Token",
        components: [
          {
            name: "id",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "collection",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "transactionExecutor",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NonceUpdated",
    inputs: [
      {
        name: "signer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220ebb3f4cdf8b0d8478fb4e86459cdf1d8e2eee65f01c2950e50bc2e4531285cfb64736f6c63430008150033";

type RegistryEventsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryEventsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistryEvents__factory extends ContractFactory {
  constructor(...args: RegistryEventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<RegistryEvents> {
    return super.deploy(overrides || {}) as Promise<RegistryEvents>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RegistryEvents {
    return super.attach(address) as RegistryEvents;
  }
  override connect(signer: Signer): RegistryEvents__factory {
    return super.connect(signer) as RegistryEvents__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryEventsInterface {
    return new utils.Interface(_abi) as RegistryEventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistryEvents {
    return new Contract(address, _abi, signerOrProvider) as RegistryEvents;
  }
}
