/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandlesEvents,
  HandlesEventsInterface,
} from "../../Events.sol/HandlesEvents";

const _abi = [
  {
    type: "event",
    name: "BatchMetadataUpdate",
    inputs: [
      {
        name: "fromTokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toTokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "HandleMinted",
    inputs: [
      {
        name: "handle",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "namespace",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "handleId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokenGuardianStateChanged",
    inputs: [
      {
        name: "wallet",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "enabled",
        type: "bool",
        indexed: true,
        internalType: "bool",
      },
      {
        name: "tokenGuardianDisablingTimestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212207e403c1f81f1031a31a1e8e5e7ad46ae33b52743e2e9fd05ab15c32af0f568e764736f6c63430008150033";

type HandlesEventsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandlesEventsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HandlesEvents__factory extends ContractFactory {
  constructor(...args: HandlesEventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<HandlesEvents> {
    return super.deploy(overrides || {}) as Promise<HandlesEvents>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandlesEvents {
    return super.attach(address) as HandlesEvents;
  }
  override connect(signer: Signer): HandlesEvents__factory {
    return super.connect(signer) as HandlesEvents__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandlesEventsInterface {
    return new utils.Interface(_abi) as HandlesEventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandlesEvents {
    return new Contract(address, _abi, signerOrProvider) as HandlesEvents;
  }
}
