/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandleNFT,
  HandleNFTInterface,
} from "../../HandleSVGGen.t.sol/HandleNFT";

const _abi = [
  {
    type: "function",
    name: "tryWithName",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610263908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63a4c3dd671461002a57600080fd5b34610179576020908160031936011261017d576001600160401b03926004358481116101795736602382011215610179578060040135610069816101ca565b9161007685519384610191565b818352366024838301011161018d579183868382959460246100bc989601838601378301015284518094819263799d5a6760e11b83528860048401526024830190610208565b038173__$7c9ebfe5a70e7779947e32a915da035c80$__5af49485156101815781956100fd575b5050506100f99051928284938452830190610208565b0390f35b90919294503d8083853e6101118185610191565b830192848185031261017d57805191821161017d570182601f820112156101795780519161013e836101ca565b9361014b87519586610191565b8385528584840101116101765750829161016d9185806100f9960191016101e5565b929038806100e3565b80fd5b5080fd5b8280fd5b508251903d90823e3d90fd5b8380fd5b601f909101601f19168101906001600160401b038211908210176101b457604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116101b457601f01601f191660200190565b60005b8381106101f85750506000910152565b81810151838201526020016101e8565b90602091610221815180928185528580860191016101e5565b601f01601f191601019056fea26469706673582212207124df85e5cb8918cd64c32b9d98c44a6bdd3fee1d96611aa0ecd13ecff4604164736f6c63430008150033";

type HandleNFTConstructorParams =
  | [linkLibraryAddresses: HandleNFTLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandleNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class HandleNFT__factory extends ContractFactory {
  constructor(...args: HandleNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        HandleNFT__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: HandleNFTLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$7c9ebfe5a70e7779947e32a915da035c80\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/svgs/Handle/HandleSVG.sol:HandleSVG"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<HandleNFT> {
    return super.deploy(overrides || {}) as Promise<HandleNFT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandleNFT {
    return super.attach(address) as HandleNFT;
  }
  override connect(signer: Signer): HandleNFT__factory {
    return super.connect(signer) as HandleNFT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandleNFTInterface {
    return new utils.Interface(_abi) as HandleNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandleNFT {
    return new Contract(address, _abi, signerOrProvider) as HandleNFT;
  }
}

export interface HandleNFTLibraryAddresses {
  ["contracts/libraries/svgs/Handle/HandleSVG.sol:HandleSVG"]: string;
}
