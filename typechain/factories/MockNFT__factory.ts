/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockNFT, MockNFTInterface } from "../MockNFT";

const _abi = [
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "exists",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getApproved",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getDomainSeparator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "nftId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mintTimestampOf",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownerOf",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testMockNFT",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "tokenDataOf",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Types.TokenData",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintTimestamp",
            type: "uint96",
            internalType: "uint96",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenURI",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidParameter",
    inputs: [],
  },
  {
    type: "error",
    name: "NonERC721ReceiverImplementer",
    inputs: [],
  },
  {
    type: "error",
    name: "NotOwnerOrApproved",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenDoesNotExist",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080806040523461001657611037908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a71461017757806306fdde0314610172578063081812fc1461016d578063095ea7b31461016857806318160ddd1461016357806323b872dd1461015e57806340c10f191461015957806342842e0e1461015457806342966c681461014f5780634f558e791461014a57806350ddf35c146101455780636352211e1461014057806370a082311461013b5780637ecebe001461013657806395d89b4114610131578063a22cb4651461012c578063a89861f514610127578063b88d4fde14610122578063c0da9bcd1461011d578063c87b56dd14610118578063e985e9c5146101135763ed24911d1461010e57600080fd5b610a57565b610a06565b610964565b6108d3565b61084b565b6107c9565b61073f565b6106fb565b6106c1565b610681565b610663565b61061b565b6105f3565b610571565b610531565b610463565b61043c565b6103e9565b610343565b6102e7565b61029e565b610193565b6001600160e01b031981160361018e57565b600080fd5b3461018e57602036600319011261018e576101fd6004356101b38161017c565b63ffffffff60e01b166380ac58cd60e01b8114908115610245575b8115610234575b8115610223575b8115610212575b8115610201575b5060405190151581529081906020820190565b0390f35b6301ffc9a760e01b149050386101ea565b635b5e139f60e01b811491506101e3565b6393ea2f1d60e01b811491506101dc565b630852cd8d60e31b811491506101d5565b63c744eb3560e01b811491506101ce565b60005b8381106102695750506000910152565b8181015183820152602001610259565b9060209161029281518092818552858086019101610256565b601f01601f1916010190565b3461018e57600036600319011261018e576101fd6040516102be816107f2565b6008815267135bd8dac813919560c21b6020820152604051918291602083526020830190610279565b3461018e57602036600319011261018e576020610305600435610acc565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361018e57565b602435906001600160a01b038216820361018e57565b3461018e57604036600319011261018e5761035c610317565b6024356001600160a01b038061037183610aab565b1680918416146103d7578033141590816103a8575b506103965761039491610cab565b005b604051636d8a29e760e11b8152600490fd5b905060005260056020526103d16103cd6103c6336040600020610a94565b5460ff1690565b1590565b38610386565b604051630309cb8760e51b8152600490fd5b3461018e57600036600319011261018e576020600854604051908152f35b606090600319011261018e576001600160a01b0390600435828116810361018e5791602435908116810361018e579060443590565b3461018e5761044a36610407565b906104558233610b51565b156103965761039492610bd9565b3461018e57604036600319011261018e5761047c610317565b6024356001600160a01b03821680158015610522575b6103d7576104e26000938285526003602052604085206104b3815460010190565b90556104c96104c460085460010190565b600855565b6104dd846000526002602052604060002090565b610bba565b600082815260026020526040902080546001600160a01b03164260a01b6001600160a01b03191617905582600080516020610fc28339815191528180a480f35b5061052c82610b34565b610492565b3461018e5761053f36610407565b60405160208101939092906001600160401b0385118486101761056c576103949460405260008452610af5565b6107dc565b3461018e57602036600319011261018e5760043561058f8133610b51565b156103965761059d81610aab565b6105a682610c69565b60018060a01b0316906000828193825260036020526040822060001990818154019055600854016008558282526002602052816040812055600080516020610fc28339815191528280a480f35b3461018e57602036600319011261018e576020610611600435610b34565b6040519015158152f35b3461018e57602036600319011261018e57600435600052600260205260406000205460a01c801561065157602090604051908152f35b60405163677510db60e11b8152600490fd5b3461018e57602036600319011261018e576020610305600435610aab565b3461018e57602036600319011261018e576001600160a01b036106a2610317565b1680156103d75760005260036020526020604060002054604051908152f35b3461018e57602036600319011261018e576001600160a01b036106e2610317565b16600052600a6020526020604060002054604051908152f35b3461018e57600036600319011261018e576101fd60405161071b816107f2565b600381526213919560ea1b6020820152604051918291602083526020830190610279565b3461018e57604036600319011261018e57610758610317565b60243580151580910361018e576001600160a01b038216913383146103d75761078e903360005260056020526040600020610a94565b60ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b3461018e57600036600319011261018e57005b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761056c57604052565b601f909101601f19168101906001600160401b0382119082101761056c57604052565b6001600160401b03811161056c57601f01601f191660200190565b3461018e57608036600319011261018e57610864610317565b61086c61032d565b606435916001600160401b03831161018e573660238401121561018e5782600401359161089883610830565b926108a6604051948561080d565b808452366024828701011161018e5760208160009260246103949801838801378501015260443591610af5565b3461018e57602036600319011261018e57600435600060206040516108f7816107f2565b828152015261090581610b34565b156106515760005260026020526101fd604060002060405190610927826107f2565b546001600160a01b03811680835260a09190911c60209283019081526040805192835290516001600160601b031692820192909252918291820190565b3461018e57602036600319011261018e5760405160808101906001600160401b0382118183101761056c576101fd91604052604381527f68747470733a2f2f697066732e696f2f697066732f516d4e5a69506b3937347660208201527f4473506d516969335962724d4b666931324b54534e4d37584d695979696561346040820152622b2cad60e91b6060820152604051918291602083526020830190610279565b3461018e57604036600319011261018e57602060ff610a4b610a26610317565b610a2e61032d565b6001600160a01b0390911660009081526005855260409020610a94565b54166040519015158152f35b3461018e57600036600319011261018e576020610a72610eab565b604051908152f35b6001600160a01b0316600090815260036020526040902090565b9060018060a01b0316600052602052604060002090565b6000908152600260205260409020546001600160a01b031680156106515790565b610ad581610b34565b15610651576000908152600460205260409020546001600160a01b031690565b929190610b028233610b51565b156103965783610b168383610b1b97610bd9565b610d72565b15610b2257565b6040516342eac10f60e11b8152600490fd5b6000908152600260205260409020546001600160a01b0316151590565b6001600160a01b0380610b6384610aab565b169080831690828214948515610ba2575b5050508215610b8257505090565b60ff925090610b9d9160005260056020526040600020610a94565b541690565b610baf9192939550610acc565b161491388080610b74565b80546001600160a01b0319166001600160a01b03909216919091179055565b610be283610aab565b6001600160a01b0380831692918116839003610c575783169283156103d757610c16610c4292610c1187610c69565b610a7a565b8054600019019055610c2781610a7a565b600181540190556104dd856000526002602052604060002090565b600080516020610fc2833981519152600080a4565b6040516349e27cff60e01b8152600490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03610c9683610aab565b16600080516020610fe28339815191528280a4565b816000526004602052610cc2816040600020610bba565b6001600160a01b0380610cd484610aab565b16911690600080516020610fe2833981519152600080a4565b9081602091031261018e5751610d028161017c565b90565b6001600160a01b039182168152911660208201526040810191909152608060608201819052610d0292910190610279565b6040513d6000823e3d90fd5b3d15610d6d573d90610d5382610830565b91610d61604051938461080d565b82523d6000602084013e565b606090565b92909190823b15610e2557610da5926020926000604051809681958294630a85bd0160e11b9a8b85523360048601610d05565b03926001600160a01b03165af160009181610df5575b50610de757610dc8610d42565b80519081610de2576040516342eac10f60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b610e1791925060203d8111610e1e575b610e0f818361080d565b810190610ced565b9038610dbb565b503d610e05565b50505050600190565b60208183031261018e578051906001600160401b03821161018e570181601f8201121561018e578051610e6081610830565b92610e6e604051948561080d565b8184526020828401011161018e57610d029160208085019101610256565b60016020604051610e9c816107f2565b82815201601960f91b81522090565b73db46d1dc155634fbc732f92e853b10b288ad5a1d301480610fb7575b610f93576040516306fdde0360e01b8152600081600481305afa908115610f8e57600091610f6d575b5060208151910120610f59610f67610f07610e8c565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f602082019081529181019590955260608501919091524660808501523060a08501529291829060c0820190565b03601f19810183528261080d565b51902090565b610f88913d8091833e610f80818361080d565b810190610e2e565b38610ef1565b610d36565b7fbf9544cf7d7a0338fc4f071be35409a61e51e9caef559305410ad74e16a05f2d90565b5060894614610ec856feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a2646970667358221220f7b5d2013bd7ee1da534314c4cceb8aa01e9a849e9dae5bf04496557756aead164736f6c63430008150033";

type MockNFTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockNFT__factory extends ContractFactory {
  constructor(...args: MockNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<MockNFT> {
    return super.deploy(overrides || {}) as Promise<MockNFT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockNFT {
    return super.attach(address) as MockNFT;
  }
  override connect(signer: Signer): MockNFT__factory {
    return super.connect(signer) as MockNFT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNFTInterface {
    return new utils.Interface(_abi) as MockNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNFT {
    return new Contract(address, _abi, signerOrProvider) as MockNFT;
  }
}
