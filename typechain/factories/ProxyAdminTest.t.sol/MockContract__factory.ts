/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockContract,
  MockContractInterface,
} from "../../ProxyAdminTest.t.sol/MockContract";

const _abi = [
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "initializationAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testMockContract",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608080604052346014576099908161001a8239f35b600080fdfe6004361015600c57600080fd5b6000803560e01c80637e48fff21460515763c4d66de814602b57600080fd5b34604e576020366003190112604e576004356001600160a01b03811603604e5780f35b80fd5b5034604e5780600319360112604e5780f3fea264697066735822122041334e7c2f7b3c0a8d02ec51927a162e3b73c5dc8d4096173d956b6424b408e064736f6c63430008150033";

type MockContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockContract__factory extends ContractFactory {
  constructor(...args: MockContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockContract> {
    return super.deploy(overrides || {}) as Promise<MockContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockContract {
    return super.attach(address) as MockContract;
  }
  override connect(signer: Signer): MockContract__factory {
    return super.connect(signer) as MockContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockContractInterface {
    return new utils.Interface(_abi) as MockContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockContract {
    return new Contract(address, _abi, signerOrProvider) as MockContract;
  }
}
