/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ArrayHelpers,
  ArrayHelpersInterface,
} from "../../helpers/ArrayHelpers";

const _abi = [
  {
    type: "function",
    name: "testArrayHelpers",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x60808060405234601357606b908160198239f35b600080fdfe6004361015600c57600080fd5b6000803560e01c639708e5bd14602157600080fd5b346032578060031936011260325780f35b80fdfea2646970667358221220a8bce6593d96a5732332d84c2c93d39da50a2144b7502c6955100616864972ca64736f6c63430008150033";

type ArrayHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArrayHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArrayHelpers__factory extends ContractFactory {
  constructor(...args: ArrayHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ArrayHelpers> {
    return super.deploy(overrides || {}) as Promise<ArrayHelpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ArrayHelpers {
    return super.attach(address) as ArrayHelpers;
  }
  override connect(signer: Signer): ArrayHelpers__factory {
    return super.connect(signer) as ArrayHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArrayHelpersInterface {
    return new utils.Interface(_abi) as ArrayHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArrayHelpers {
    return new Contract(address, _abi, signerOrProvider) as ArrayHelpers;
  }
}
