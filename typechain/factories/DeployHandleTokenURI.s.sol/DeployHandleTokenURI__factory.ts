/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DeployHandleTokenURI,
  DeployHandleTokenURIInterface,
} from "../../DeployHandleTokenURI.s.sol/DeployHandleTokenURI";

const _abi = [
  {
    type: "function",
    name: "IS_SCRIPT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testForkManagement",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x60808060405234602b57600160ff1981816004541617600455600c541617600c55609e90816100318239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c8063f0c0adc31460535763f8ccbf4714603257600080fd5b34604f5781600319360112604f5760209060ff600c541615158152f35b5080fd5b82346065578060031936011260655780f35b80fdfea264697066735822122034c9ad6c1f29d0b3392d8ed0cec3d2af18fdd9c1ac3f072be02374dd1f679d9d64736f6c63430008150033";

type DeployHandleTokenURIConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeployHandleTokenURIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DeployHandleTokenURI__factory extends ContractFactory {
  constructor(...args: DeployHandleTokenURIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DeployHandleTokenURI> {
    return super.deploy(overrides || {}) as Promise<DeployHandleTokenURI>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DeployHandleTokenURI {
    return super.attach(address) as DeployHandleTokenURI;
  }
  override connect(signer: Signer): DeployHandleTokenURI__factory {
    return super.connect(signer) as DeployHandleTokenURI__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeployHandleTokenURIInterface {
    return new utils.Interface(_abi) as DeployHandleTokenURIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeployHandleTokenURI {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DeployHandleTokenURI;
  }
}
