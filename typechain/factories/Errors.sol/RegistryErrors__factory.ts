/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RegistryErrors,
  RegistryErrorsInterface,
} from "../../Errors.sol/RegistryErrors";

const _abi = [
  {
    type: "error",
    name: "DoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "DoesNotHavePermissions",
    inputs: [],
  },
  {
    type: "error",
    name: "HandleAndTokenNotInSameWallet",
    inputs: [],
  },
  {
    type: "error",
    name: "NotHandleNorTokenOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NotLinked",
    inputs: [],
  },
  {
    type: "error",
    name: "OnlyDiGiHub",
    inputs: [],
  },
  {
    type: "error",
    name: "SignatureInvalid",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200ce668e6a610b02138720070d4a3fd10c16e566311c5dfd50f19b289b8ffb67864736f6c63430008150033";

type RegistryErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistryErrors__factory extends ContractFactory {
  constructor(...args: RegistryErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<RegistryErrors> {
    return super.deploy(overrides || {}) as Promise<RegistryErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RegistryErrors {
    return super.attach(address) as RegistryErrors;
  }
  override connect(signer: Signer): RegistryErrors__factory {
    return super.connect(signer) as RegistryErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryErrorsInterface {
    return new utils.Interface(_abi) as RegistryErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistryErrors {
    return new Contract(address, _abi, signerOrProvider) as RegistryErrors;
  }
}
