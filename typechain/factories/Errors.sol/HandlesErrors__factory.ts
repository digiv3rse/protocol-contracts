/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HandlesErrors,
  HandlesErrorsInterface,
} from "../../Errors.sol/HandlesErrors";

const _abi = [
  {
    type: "error",
    name: "AlreadyEnabled",
    inputs: [],
  },
  {
    type: "error",
    name: "DisablingAlreadyTriggered",
    inputs: [],
  },
  {
    type: "error",
    name: "DoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "GuardianEnabled",
    inputs: [],
  },
  {
    type: "error",
    name: "HandleContainsInvalidCharacters",
    inputs: [],
  },
  {
    type: "error",
    name: "HandleFirstCharInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "HandleLengthInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "NotEOA",
    inputs: [],
  },
  {
    type: "error",
    name: "NotHub",
    inputs: [],
  },
  {
    type: "error",
    name: "NotOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NotOwnerNorWhitelisted",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a439cdd6675cf10db42b5572e0c79f5f1dd83a7f8ed93a7944594ab676a035bd64736f6c63430008150033";

type HandlesErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandlesErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HandlesErrors__factory extends ContractFactory {
  constructor(...args: HandlesErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<HandlesErrors> {
    return super.deploy(overrides || {}) as Promise<HandlesErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandlesErrors {
    return super.attach(address) as HandlesErrors;
  }
  override connect(signer: Signer): HandlesErrors__factory {
    return super.connect(signer) as HandlesErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandlesErrorsInterface {
    return new utils.Interface(_abi) as HandlesErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandlesErrors {
    return new Contract(address, _abi, signerOrProvider) as HandlesErrors;
  }
}
