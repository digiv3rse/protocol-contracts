/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Errors,
  ErrorsInterface,
} from "../../../modules/constants/Errors";

const _abi = [
  {
    type: "error",
    name: "AlreadyInitialized",
    inputs: [],
  },
  {
    type: "error",
    name: "CollectExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "CollectNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "FollowInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "InitParamsInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidParams",
    inputs: [],
  },
  {
    type: "error",
    name: "MintLimitExceeded",
    inputs: [],
  },
  {
    type: "error",
    name: "ModuleDataMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "NotActionModule",
    inputs: [],
  },
  {
    type: "error",
    name: "NotHub",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122068b22fdd1dc64bfce0f5c52a8e5b32a5dab564a5cc831f01d195d2c9b49769b864736f6c63430008150033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
