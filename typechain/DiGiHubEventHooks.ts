/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DiGiHubEventHooksInterface extends utils.Interface {
  functions: {
    "emitCollectNFTTransferEvent(uint256,uint256,uint256,address,address)": FunctionFragment;
    "emitUnfollowedEvent(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "emitCollectNFTTransferEvent"
      | "emitUnfollowedEvent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emitCollectNFTTransferEvent",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitUnfollowedEvent",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "emitCollectNFTTransferEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitUnfollowedEvent",
    data: BytesLike
  ): Result;

  events: {
    "CollectNFTTransferred(uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "Unfollowed(uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectNFTTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfollowed"): EventFragment;
}

export interface CollectNFTTransferredEventObject {
  profileId: BigNumber;
  pubId: BigNumber;
  collectNFTId: BigNumber;
  from: string;
  to: string;
  timestamp: BigNumber;
}
export type CollectNFTTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  CollectNFTTransferredEventObject
>;

export type CollectNFTTransferredEventFilter =
  TypedEventFilter<CollectNFTTransferredEvent>;

export interface UnfollowedEventObject {
  unfollowerProfileId: BigNumber;
  idOfProfileUnfollowed: BigNumber;
  transactionExecutor: string;
  timestamp: BigNumber;
}
export type UnfollowedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  UnfollowedEventObject
>;

export type UnfollowedEventFilter = TypedEventFilter<UnfollowedEvent>;

export interface DiGiHubEventHooks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiGiHubEventHooksInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitCollectNFTTransferEvent(
      profileId: BigNumberish,
      pubId: BigNumberish,
      collectNFTId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitUnfollowedEvent(
      unfollowerProfileId: BigNumberish,
      idOfProfileUnfollowed: BigNumberish,
      transactionExecutor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  emitCollectNFTTransferEvent(
    profileId: BigNumberish,
    pubId: BigNumberish,
    collectNFTId: BigNumberish,
    from: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitUnfollowedEvent(
    unfollowerProfileId: BigNumberish,
    idOfProfileUnfollowed: BigNumberish,
    transactionExecutor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitCollectNFTTransferEvent(
      profileId: BigNumberish,
      pubId: BigNumberish,
      collectNFTId: BigNumberish,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitUnfollowedEvent(
      unfollowerProfileId: BigNumberish,
      idOfProfileUnfollowed: BigNumberish,
      transactionExecutor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollectNFTTransferred(uint256,uint256,uint256,address,address,uint256)"(
      profileId?: BigNumberish | null,
      pubId?: BigNumberish | null,
      collectNFTId?: BigNumberish | null,
      from?: null,
      to?: null,
      timestamp?: null
    ): CollectNFTTransferredEventFilter;
    CollectNFTTransferred(
      profileId?: BigNumberish | null,
      pubId?: BigNumberish | null,
      collectNFTId?: BigNumberish | null,
      from?: null,
      to?: null,
      timestamp?: null
    ): CollectNFTTransferredEventFilter;

    "Unfollowed(uint256,uint256,address,uint256)"(
      unfollowerProfileId?: BigNumberish | null,
      idOfProfileUnfollowed?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): UnfollowedEventFilter;
    Unfollowed(
      unfollowerProfileId?: BigNumberish | null,
      idOfProfileUnfollowed?: null,
      transactionExecutor?: null,
      timestamp?: null
    ): UnfollowedEventFilter;
  };

  estimateGas: {
    emitCollectNFTTransferEvent(
      profileId: BigNumberish,
      pubId: BigNumberish,
      collectNFTId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitUnfollowedEvent(
      unfollowerProfileId: BigNumberish,
      idOfProfileUnfollowed: BigNumberish,
      transactionExecutor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitCollectNFTTransferEvent(
      profileId: BigNumberish,
      pubId: BigNumberish,
      collectNFTId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitUnfollowedEvent(
      unfollowerProfileId: BigNumberish,
      idOfProfileUnfollowed: BigNumberish,
      transactionExecutor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
