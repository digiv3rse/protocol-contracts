/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DiGiGovernableInterface extends utils.Interface {
  functions: {
    "getFollowTokenURIContract()": FunctionFragment;
    "getGovernance()": FunctionFragment;
    "getProfileTokenURIContract()": FunctionFragment;
    "getState()": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "getTreasuryData()": FunctionFragment;
    "getTreasuryFee()": FunctionFragment;
    "isProfileCreatorWhitelisted(address)": FunctionFragment;
    "setEmergencyAdmin(address)": FunctionFragment;
    "setFollowTokenURIContract(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setProfileTokenURIContract(address)": FunctionFragment;
    "setState(uint8)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setTreasuryFee(uint16)": FunctionFragment;
    "whitelistProfileCreator(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFollowTokenURIContract"
      | "getGovernance"
      | "getProfileTokenURIContract"
      | "getState"
      | "getTreasury"
      | "getTreasuryData"
      | "getTreasuryFee"
      | "isProfileCreatorWhitelisted"
      | "setEmergencyAdmin"
      | "setFollowTokenURIContract"
      | "setGovernance"
      | "setProfileTokenURIContract"
      | "setState"
      | "setTreasury"
      | "setTreasuryFee"
      | "whitelistProfileCreator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFollowTokenURIContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileTokenURIContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isProfileCreatorWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFollowTokenURIContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileTokenURIContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistProfileCreator",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFollowTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProfileCreatorWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFollowTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistProfileCreator",
    data: BytesLike
  ): Result;

  events: {
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "TreasuryFeeSet(uint16,uint16,uint256)": EventFragment;
    "TreasurySet(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
}

export interface BatchMetadataUpdateEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  BatchMetadataUpdateEventObject
>;

export type BatchMetadataUpdateEventFilter =
  TypedEventFilter<BatchMetadataUpdateEvent>;

export interface TreasuryFeeSetEventObject {
  prevTreasuryFee: number;
  newTreasuryFee: number;
  timestamp: BigNumber;
}
export type TreasuryFeeSetEvent = TypedEvent<
  [number, number, BigNumber],
  TreasuryFeeSetEventObject
>;

export type TreasuryFeeSetEventFilter = TypedEventFilter<TreasuryFeeSetEvent>;

export interface TreasurySetEventObject {
  prevTreasury: string;
  newTreasury: string;
  timestamp: BigNumber;
}
export type TreasurySetEvent = TypedEvent<
  [string, string, BigNumber],
  TreasurySetEventObject
>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface DiGiGovernable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiGiGovernableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFollowTokenURIContract(overrides?: CallOverrides): Promise<[string]>;

    getGovernance(overrides?: CallOverrides): Promise<[string]>;

    getProfileTokenURIContract(overrides?: CallOverrides): Promise<[string]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    getTreasuryData(overrides?: CallOverrides): Promise<[string, number]>;

    getTreasuryFee(overrides?: CallOverrides): Promise<[number]>;

    isProfileCreatorWhitelisted(
      profileCreator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setEmergencyAdmin(
      newEmergencyAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFollowTokenURIContract(
      followTokenURIContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProfileTokenURIContract(
      profileTokenURIContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasuryFee(
      newTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelistProfileCreator(
      profileCreator: string,
      whitelist: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getFollowTokenURIContract(overrides?: CallOverrides): Promise<string>;

  getGovernance(overrides?: CallOverrides): Promise<string>;

  getProfileTokenURIContract(overrides?: CallOverrides): Promise<string>;

  getState(overrides?: CallOverrides): Promise<number>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  getTreasuryData(overrides?: CallOverrides): Promise<[string, number]>;

  getTreasuryFee(overrides?: CallOverrides): Promise<number>;

  isProfileCreatorWhitelisted(
    profileCreator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setEmergencyAdmin(
    newEmergencyAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFollowTokenURIContract(
    followTokenURIContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGovernance(
    newGovernance: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProfileTokenURIContract(
    profileTokenURIContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setState(
    newState: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasury(
    newTreasury: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasuryFee(
    newTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelistProfileCreator(
    profileCreator: string,
    whitelist: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFollowTokenURIContract(overrides?: CallOverrides): Promise<string>;

    getGovernance(overrides?: CallOverrides): Promise<string>;

    getProfileTokenURIContract(overrides?: CallOverrides): Promise<string>;

    getState(overrides?: CallOverrides): Promise<number>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    getTreasuryData(overrides?: CallOverrides): Promise<[string, number]>;

    getTreasuryFee(overrides?: CallOverrides): Promise<number>;

    isProfileCreatorWhitelisted(
      profileCreator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEmergencyAdmin(
      newEmergencyAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFollowTokenURIContract(
      followTokenURIContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileTokenURIContract(
      profileTokenURIContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setState(newState: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTreasury(newTreasury: string, overrides?: CallOverrides): Promise<void>;

    setTreasuryFee(
      newTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistProfileCreator(
      profileCreator: string,
      whitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BatchMetadataUpdate(uint256,uint256)"(
      fromTokenId?: null,
      toTokenId?: null
    ): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(
      fromTokenId?: null,
      toTokenId?: null
    ): BatchMetadataUpdateEventFilter;

    "TreasuryFeeSet(uint16,uint16,uint256)"(
      prevTreasuryFee?: BigNumberish | null,
      newTreasuryFee?: BigNumberish | null,
      timestamp?: null
    ): TreasuryFeeSetEventFilter;
    TreasuryFeeSet(
      prevTreasuryFee?: BigNumberish | null,
      newTreasuryFee?: BigNumberish | null,
      timestamp?: null
    ): TreasuryFeeSetEventFilter;

    "TreasurySet(address,address,uint256)"(
      prevTreasury?: string | null,
      newTreasury?: string | null,
      timestamp?: null
    ): TreasurySetEventFilter;
    TreasurySet(
      prevTreasury?: string | null,
      newTreasury?: string | null,
      timestamp?: null
    ): TreasurySetEventFilter;
  };

  estimateGas: {
    getFollowTokenURIContract(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    getProfileTokenURIContract(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryData(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    isProfileCreatorWhitelisted(
      profileCreator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEmergencyAdmin(
      newEmergencyAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFollowTokenURIContract(
      followTokenURIContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProfileTokenURIContract(
      profileTokenURIContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasuryFee(
      newTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelistProfileCreator(
      profileCreator: string,
      whitelist: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFollowTokenURIContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfileTokenURIContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasuryData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProfileCreatorWhitelisted(
      profileCreator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEmergencyAdmin(
      newEmergencyAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFollowTokenURIContract(
      followTokenURIContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProfileTokenURIContract(
      profileTokenURIContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasuryFee(
      newTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelistProfileCreator(
      profileCreator: string,
      whitelist: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
