/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PublicDropStruct = {
  mintPrice: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  maxTotalMintableByWallet: BigNumberish;
  feeBps: BigNumberish;
  restrictFeeRecipients: boolean;
};

export type PublicDropStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  boolean
] & {
  mintPrice: BigNumber;
  startTime: number;
  endTime: number;
  maxTotalMintableByWallet: number;
  feeBps: number;
  restrictFeeRecipients: boolean;
};

export type SignedMintValidationParamsStruct = {
  minMintPrice: BigNumberish;
  maxMaxTotalMintableByWallet: BigNumberish;
  minStartTime: BigNumberish;
  maxEndTime: BigNumberish;
  maxMaxTokenSupplyForStage: BigNumberish;
  minFeeBps: BigNumberish;
  maxFeeBps: BigNumberish;
};

export type SignedMintValidationParamsStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  minMintPrice: BigNumber;
  maxMaxTotalMintableByWallet: number;
  minStartTime: number;
  maxEndTime: number;
  maxMaxTokenSupplyForStage: number;
  minFeeBps: number;
  maxFeeBps: number;
};

export type TokenGatedDropStageStruct = {
  mintPrice: BigNumberish;
  maxTotalMintableByWallet: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  dropStageIndex: BigNumberish;
  maxTokenSupplyForStage: BigNumberish;
  feeBps: BigNumberish;
  restrictFeeRecipients: boolean;
};

export type TokenGatedDropStageStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  boolean
] & {
  mintPrice: BigNumber;
  maxTotalMintableByWallet: number;
  startTime: number;
  endTime: number;
  dropStageIndex: number;
  maxTokenSupplyForStage: number;
  feeBps: number;
  restrictFeeRecipients: boolean;
};

export interface SeaDropErrorsAndEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AllowListUpdated(address,bytes32,bytes32,string[],string)": EventFragment;
    "AllowedFeeRecipientUpdated(address,address,bool)": EventFragment;
    "CreatorPayoutAddressUpdated(address,address)": EventFragment;
    "DropURIUpdated(address,string)": EventFragment;
    "PayerUpdated(address,address,bool)": EventFragment;
    "PublicDropUpdated(address,(uint80,uint48,uint48,uint16,uint16,bool))": EventFragment;
    "SeaDropMint(address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "SignedMintValidationParamsUpdated(address,address,(uint80,uint24,uint40,uint40,uint40,uint16,uint16))": EventFragment;
    "TokenGatedDropStageUpdated(address,address,(uint80,uint16,uint48,uint48,uint8,uint32,uint16,bool))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowListUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowedFeeRecipientUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreatorPayoutAddressUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DropURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicDropUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeaDropMint"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignedMintValidationParamsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenGatedDropStageUpdated"): EventFragment;
}

export interface AllowListUpdatedEventObject {
  nftContract: string;
  previousMerkleRoot: string;
  newMerkleRoot: string;
  publicKeyURI: string[];
  allowListURI: string;
}
export type AllowListUpdatedEvent = TypedEvent<
  [string, string, string, string[], string],
  AllowListUpdatedEventObject
>;

export type AllowListUpdatedEventFilter =
  TypedEventFilter<AllowListUpdatedEvent>;

export interface AllowedFeeRecipientUpdatedEventObject {
  nftContract: string;
  feeRecipient: string;
  allowed: boolean;
}
export type AllowedFeeRecipientUpdatedEvent = TypedEvent<
  [string, string, boolean],
  AllowedFeeRecipientUpdatedEventObject
>;

export type AllowedFeeRecipientUpdatedEventFilter =
  TypedEventFilter<AllowedFeeRecipientUpdatedEvent>;

export interface CreatorPayoutAddressUpdatedEventObject {
  nftContract: string;
  newPayoutAddress: string;
}
export type CreatorPayoutAddressUpdatedEvent = TypedEvent<
  [string, string],
  CreatorPayoutAddressUpdatedEventObject
>;

export type CreatorPayoutAddressUpdatedEventFilter =
  TypedEventFilter<CreatorPayoutAddressUpdatedEvent>;

export interface DropURIUpdatedEventObject {
  nftContract: string;
  newDropURI: string;
}
export type DropURIUpdatedEvent = TypedEvent<
  [string, string],
  DropURIUpdatedEventObject
>;

export type DropURIUpdatedEventFilter = TypedEventFilter<DropURIUpdatedEvent>;

export interface PayerUpdatedEventObject {
  nftContract: string;
  payer: string;
  allowed: boolean;
}
export type PayerUpdatedEvent = TypedEvent<
  [string, string, boolean],
  PayerUpdatedEventObject
>;

export type PayerUpdatedEventFilter = TypedEventFilter<PayerUpdatedEvent>;

export interface PublicDropUpdatedEventObject {
  nftContract: string;
  publicDrop: PublicDropStructOutput;
}
export type PublicDropUpdatedEvent = TypedEvent<
  [string, PublicDropStructOutput],
  PublicDropUpdatedEventObject
>;

export type PublicDropUpdatedEventFilter =
  TypedEventFilter<PublicDropUpdatedEvent>;

export interface SeaDropMintEventObject {
  nftContract: string;
  minter: string;
  feeRecipient: string;
  payer: string;
  quantityMinted: BigNumber;
  unitMintPrice: BigNumber;
  feeBps: BigNumber;
  dropStageIndex: BigNumber;
}
export type SeaDropMintEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SeaDropMintEventObject
>;

export type SeaDropMintEventFilter = TypedEventFilter<SeaDropMintEvent>;

export interface SignedMintValidationParamsUpdatedEventObject {
  nftContract: string;
  signer: string;
  signedMintValidationParams: SignedMintValidationParamsStructOutput;
}
export type SignedMintValidationParamsUpdatedEvent = TypedEvent<
  [string, string, SignedMintValidationParamsStructOutput],
  SignedMintValidationParamsUpdatedEventObject
>;

export type SignedMintValidationParamsUpdatedEventFilter =
  TypedEventFilter<SignedMintValidationParamsUpdatedEvent>;

export interface TokenGatedDropStageUpdatedEventObject {
  nftContract: string;
  allowedNftToken: string;
  dropStage: TokenGatedDropStageStructOutput;
}
export type TokenGatedDropStageUpdatedEvent = TypedEvent<
  [string, string, TokenGatedDropStageStructOutput],
  TokenGatedDropStageUpdatedEventObject
>;

export type TokenGatedDropStageUpdatedEventFilter =
  TypedEventFilter<TokenGatedDropStageUpdatedEvent>;

export interface SeaDropErrorsAndEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeaDropErrorsAndEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AllowListUpdated(address,bytes32,bytes32,string[],string)"(
      nftContract?: string | null,
      previousMerkleRoot?: BytesLike | null,
      newMerkleRoot?: BytesLike | null,
      publicKeyURI?: null,
      allowListURI?: null
    ): AllowListUpdatedEventFilter;
    AllowListUpdated(
      nftContract?: string | null,
      previousMerkleRoot?: BytesLike | null,
      newMerkleRoot?: BytesLike | null,
      publicKeyURI?: null,
      allowListURI?: null
    ): AllowListUpdatedEventFilter;

    "AllowedFeeRecipientUpdated(address,address,bool)"(
      nftContract?: string | null,
      feeRecipient?: string | null,
      allowed?: boolean | null
    ): AllowedFeeRecipientUpdatedEventFilter;
    AllowedFeeRecipientUpdated(
      nftContract?: string | null,
      feeRecipient?: string | null,
      allowed?: boolean | null
    ): AllowedFeeRecipientUpdatedEventFilter;

    "CreatorPayoutAddressUpdated(address,address)"(
      nftContract?: string | null,
      newPayoutAddress?: string | null
    ): CreatorPayoutAddressUpdatedEventFilter;
    CreatorPayoutAddressUpdated(
      nftContract?: string | null,
      newPayoutAddress?: string | null
    ): CreatorPayoutAddressUpdatedEventFilter;

    "DropURIUpdated(address,string)"(
      nftContract?: string | null,
      newDropURI?: null
    ): DropURIUpdatedEventFilter;
    DropURIUpdated(
      nftContract?: string | null,
      newDropURI?: null
    ): DropURIUpdatedEventFilter;

    "PayerUpdated(address,address,bool)"(
      nftContract?: string | null,
      payer?: string | null,
      allowed?: boolean | null
    ): PayerUpdatedEventFilter;
    PayerUpdated(
      nftContract?: string | null,
      payer?: string | null,
      allowed?: boolean | null
    ): PayerUpdatedEventFilter;

    "PublicDropUpdated(address,(uint80,uint48,uint48,uint16,uint16,bool))"(
      nftContract?: string | null,
      publicDrop?: null
    ): PublicDropUpdatedEventFilter;
    PublicDropUpdated(
      nftContract?: string | null,
      publicDrop?: null
    ): PublicDropUpdatedEventFilter;

    "SeaDropMint(address,address,address,address,uint256,uint256,uint256,uint256)"(
      nftContract?: string | null,
      minter?: string | null,
      feeRecipient?: string | null,
      payer?: null,
      quantityMinted?: null,
      unitMintPrice?: null,
      feeBps?: null,
      dropStageIndex?: null
    ): SeaDropMintEventFilter;
    SeaDropMint(
      nftContract?: string | null,
      minter?: string | null,
      feeRecipient?: string | null,
      payer?: null,
      quantityMinted?: null,
      unitMintPrice?: null,
      feeBps?: null,
      dropStageIndex?: null
    ): SeaDropMintEventFilter;

    "SignedMintValidationParamsUpdated(address,address,(uint80,uint24,uint40,uint40,uint40,uint16,uint16))"(
      nftContract?: string | null,
      signer?: string | null,
      signedMintValidationParams?: null
    ): SignedMintValidationParamsUpdatedEventFilter;
    SignedMintValidationParamsUpdated(
      nftContract?: string | null,
      signer?: string | null,
      signedMintValidationParams?: null
    ): SignedMintValidationParamsUpdatedEventFilter;

    "TokenGatedDropStageUpdated(address,address,(uint80,uint16,uint48,uint48,uint8,uint32,uint16,bool))"(
      nftContract?: string | null,
      allowedNftToken?: string | null,
      dropStage?: null
    ): TokenGatedDropStageUpdatedEventFilter;
    TokenGatedDropStageUpdated(
      nftContract?: string | null,
      allowedNftToken?: string | null,
      dropStage?: null
    ): TokenGatedDropStageUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
