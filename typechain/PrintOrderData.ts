/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PrintOrderDataInterface extends utils.Interface {
  functions: {
    "createNFTOnlyOrder(uint256[],address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createOrder(uint256[],string,address,address,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "createSubOrder(uint256[],address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getAddressToNFTOnlyOrderIds(address)": FunctionFragment;
    "getAddressToOrderIds(address)": FunctionFragment;
    "getAddressToTokenIds(address)": FunctionFragment;
    "getNFTOnlyOrderAmount(uint256)": FunctionFragment;
    "getNFTOnlyOrderBuyer(uint256)": FunctionFragment;
    "getNFTOnlyOrderBuyerProfileId(uint256)": FunctionFragment;
    "getNFTOnlyOrderChosenCurrency(uint256)": FunctionFragment;
    "getNFTOnlyOrderCollectionId(uint256)": FunctionFragment;
    "getNFTOnlyOrderMessages(uint256)": FunctionFragment;
    "getNFTOnlyOrderProfileId(uint256)": FunctionFragment;
    "getNFTOnlyOrderPubId(uint256)": FunctionFragment;
    "getNFTOnlyOrderSupply()": FunctionFragment;
    "getNFTOnlyOrderTimestamp(uint256)": FunctionFragment;
    "getNFTOnlyOrderTokenIds(uint256)": FunctionFragment;
    "getNFTOnlyOrderTotalPrice(uint256)": FunctionFragment;
    "getOrderBuyer(uint256)": FunctionFragment;
    "getOrderBuyerProfileId(uint256)": FunctionFragment;
    "getOrderChosenCurrency(uint256)": FunctionFragment;
    "getOrderDetails(uint256)": FunctionFragment;
    "getOrderMessages(uint256)": FunctionFragment;
    "getOrderProfileId(uint256)": FunctionFragment;
    "getOrderPubId(uint256)": FunctionFragment;
    "getOrderSubOrders(uint256)": FunctionFragment;
    "getOrderSupply()": FunctionFragment;
    "getOrderTimestamp(uint256)": FunctionFragment;
    "getOrderTotalPrice(uint256)": FunctionFragment;
    "getOrderWithPKP(uint256)": FunctionFragment;
    "getSubOrderAmount(uint256)": FunctionFragment;
    "getSubOrderCollectionId(uint256)": FunctionFragment;
    "getSubOrderFulfiller(uint256)": FunctionFragment;
    "getSubOrderIsFulfilled(uint256)": FunctionFragment;
    "getSubOrderOrderId(uint256)": FunctionFragment;
    "getSubOrderPrice(uint256)": FunctionFragment;
    "getSubOrderStatus(uint256)": FunctionFragment;
    "getSubOrderSupply()": FunctionFragment;
    "getSubOrderTokenIds(uint256)": FunctionFragment;
    "marketCreator()": FunctionFragment;
    "name()": FunctionFragment;
    "printAccessControl()": FunctionFragment;
    "printDesignData()": FunctionFragment;
    "setMarketCreatorAddress(address)": FunctionFragment;
    "setNFTOnlyOrderMessage(string,uint256)": FunctionFragment;
    "setOrderDetails(string,uint256)": FunctionFragment;
    "setOrderMessage(string,uint256)": FunctionFragment;
    "setPrintAccessControlAddress(address)": FunctionFragment;
    "setPrintDesignDataAddress(address)": FunctionFragment;
    "setSubOrderStatus(uint256,uint8)": FunctionFragment;
    "setSubOrderisFulfilled(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createNFTOnlyOrder"
      | "createOrder"
      | "createSubOrder"
      | "getAddressToNFTOnlyOrderIds"
      | "getAddressToOrderIds"
      | "getAddressToTokenIds"
      | "getNFTOnlyOrderAmount"
      | "getNFTOnlyOrderBuyer"
      | "getNFTOnlyOrderBuyerProfileId"
      | "getNFTOnlyOrderChosenCurrency"
      | "getNFTOnlyOrderCollectionId"
      | "getNFTOnlyOrderMessages"
      | "getNFTOnlyOrderProfileId"
      | "getNFTOnlyOrderPubId"
      | "getNFTOnlyOrderSupply"
      | "getNFTOnlyOrderTimestamp"
      | "getNFTOnlyOrderTokenIds"
      | "getNFTOnlyOrderTotalPrice"
      | "getOrderBuyer"
      | "getOrderBuyerProfileId"
      | "getOrderChosenCurrency"
      | "getOrderDetails"
      | "getOrderMessages"
      | "getOrderProfileId"
      | "getOrderPubId"
      | "getOrderSubOrders"
      | "getOrderSupply"
      | "getOrderTimestamp"
      | "getOrderTotalPrice"
      | "getOrderWithPKP"
      | "getSubOrderAmount"
      | "getSubOrderCollectionId"
      | "getSubOrderFulfiller"
      | "getSubOrderIsFulfilled"
      | "getSubOrderOrderId"
      | "getSubOrderPrice"
      | "getSubOrderStatus"
      | "getSubOrderSupply"
      | "getSubOrderTokenIds"
      | "marketCreator"
      | "name"
      | "printAccessControl"
      | "printDesignData"
      | "setMarketCreatorAddress"
      | "setNFTOnlyOrderMessage"
      | "setOrderDetails"
      | "setOrderMessage"
      | "setPrintAccessControlAddress"
      | "setPrintDesignDataAddress"
      | "setSubOrderStatus"
      | "setSubOrderisFulfilled"
      | "symbol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createNFTOnlyOrder",
    values: [
      BigNumberish[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      BigNumberish[],
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubOrder",
    values: [
      BigNumberish[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressToNFTOnlyOrderIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressToOrderIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressToTokenIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderBuyerProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderChosenCurrency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderCollectionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderPubId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOnlyOrderTotalPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBuyerProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderChosenCurrency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderPubId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderSubOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTotalPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderWithPKP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderCollectionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderFulfiller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderIsFulfilled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderOrderId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubOrderTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "printAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "printDesignData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketCreatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTOnlyOrderMessage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderDetails",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderMessage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrintAccessControlAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrintDesignDataAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubOrderStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubOrderisFulfilled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createNFTOnlyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressToNFTOnlyOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressToOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressToTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderBuyerProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderChosenCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderPubId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOnlyOrderTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBuyerProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderChosenCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderPubId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderSubOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderWithPKP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderFulfiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderIsFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubOrderTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "printAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "printDesignData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTOnlyOrderMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrintAccessControlAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrintDesignDataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubOrderisFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {
    "NFTOnlyOrderCreated(uint256,uint256,address,uint256,uint256,address)": EventFragment;
    "OrderCreated(uint256,uint256,address,uint256,uint256,address)": EventFragment;
    "SubOrderIsFulfilled(uint256)": EventFragment;
    "UpdateNFTOnlyOrderMessage(uint256,string)": EventFragment;
    "UpdateOrderDetails(uint256,string)": EventFragment;
    "UpdateOrderMessage(uint256,string)": EventFragment;
    "UpdateSubOrderStatus(uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTOnlyOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubOrderIsFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateNFTOnlyOrderMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOrderDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOrderMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSubOrderStatus"): EventFragment;
}

export interface NFTOnlyOrderCreatedEventObject {
  orderId: BigNumber;
  totalPrice: BigNumber;
  currency: string;
  pubId: BigNumber;
  profileId: BigNumber;
  buyer: string;
}
export type NFTOnlyOrderCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string],
  NFTOnlyOrderCreatedEventObject
>;

export type NFTOnlyOrderCreatedEventFilter =
  TypedEventFilter<NFTOnlyOrderCreatedEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  totalPrice: BigNumber;
  currency: string;
  pubId: BigNumber;
  profileId: BigNumber;
  buyer: string;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface SubOrderIsFulfilledEventObject {
  subOrderId: BigNumber;
}
export type SubOrderIsFulfilledEvent = TypedEvent<
  [BigNumber],
  SubOrderIsFulfilledEventObject
>;

export type SubOrderIsFulfilledEventFilter =
  TypedEventFilter<SubOrderIsFulfilledEvent>;

export interface UpdateNFTOnlyOrderMessageEventObject {
  orderId: BigNumber;
  newMessageDetails: string;
}
export type UpdateNFTOnlyOrderMessageEvent = TypedEvent<
  [BigNumber, string],
  UpdateNFTOnlyOrderMessageEventObject
>;

export type UpdateNFTOnlyOrderMessageEventFilter =
  TypedEventFilter<UpdateNFTOnlyOrderMessageEvent>;

export interface UpdateOrderDetailsEventObject {
  orderId: BigNumber;
  newOrderDetails: string;
}
export type UpdateOrderDetailsEvent = TypedEvent<
  [BigNumber, string],
  UpdateOrderDetailsEventObject
>;

export type UpdateOrderDetailsEventFilter =
  TypedEventFilter<UpdateOrderDetailsEvent>;

export interface UpdateOrderMessageEventObject {
  orderId: BigNumber;
  newMessageDetails: string;
}
export type UpdateOrderMessageEvent = TypedEvent<
  [BigNumber, string],
  UpdateOrderMessageEventObject
>;

export type UpdateOrderMessageEventFilter =
  TypedEventFilter<UpdateOrderMessageEvent>;

export interface UpdateSubOrderStatusEventObject {
  subOrderId: BigNumber;
  newSubOrderStatus: number;
}
export type UpdateSubOrderStatusEvent = TypedEvent<
  [BigNumber, number],
  UpdateSubOrderStatusEventObject
>;

export type UpdateSubOrderStatusEventFilter =
  TypedEventFilter<UpdateSubOrderStatusEvent>;

export interface PrintOrderData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrintOrderDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNFTOnlyOrder(
      _tokenIds: BigNumberish[],
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _collectionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createOrder(
      _subOrderIds: BigNumberish[],
      _details: string,
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _withPKP: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createSubOrder(
      _tokenIds: BigNumberish[],
      _fullfiller: string,
      _buyer: string,
      _amount: BigNumberish,
      _orderId: BigNumberish,
      _price: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAddressToNFTOnlyOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAddressToOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAddressToTokenIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getNFTOnlyOrderAmount(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTOnlyOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTOnlyOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTOnlyOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTOnlyOrderCollectionId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTOnlyOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getNFTOnlyOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTOnlyOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTOnlyOrderSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNFTOnlyOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTOnlyOrderTokenIds(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getNFTOnlyOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOrderDetails(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderSubOrders(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOrderSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderWithPKP(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getSubOrderAmount(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubOrderCollectionId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubOrderFulfiller(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubOrderIsFulfilled(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getSubOrderOrderId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubOrderPrice(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubOrderStatus(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSubOrderSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSubOrderTokenIds(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    marketCreator(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    printAccessControl(overrides?: CallOverrides): Promise<[string]>;

    printDesignData(overrides?: CallOverrides): Promise<[string]>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNFTOnlyOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOrderDetails(
      _newDetails: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubOrderStatus(
      _subOrderId: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubOrderisFulfilled(
      _subOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;
  };

  createNFTOnlyOrder(
    _tokenIds: BigNumberish[],
    _chosenCurrency: string,
    _buyer: string,
    _pubId: BigNumberish,
    _profileId: BigNumberish,
    _buyerProfileId: BigNumberish,
    _totalPrice: BigNumberish,
    _collectionId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createOrder(
    _subOrderIds: BigNumberish[],
    _details: string,
    _chosenCurrency: string,
    _buyer: string,
    _pubId: BigNumberish,
    _profileId: BigNumberish,
    _buyerProfileId: BigNumberish,
    _totalPrice: BigNumberish,
    _withPKP: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createSubOrder(
    _tokenIds: BigNumberish[],
    _fullfiller: string,
    _buyer: string,
    _amount: BigNumberish,
    _orderId: BigNumberish,
    _price: BigNumberish,
    _collectionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAddressToNFTOnlyOrderIds(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAddressToOrderIds(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAddressToTokenIds(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getNFTOnlyOrderAmount(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTOnlyOrderBuyer(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNFTOnlyOrderBuyerProfileId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTOnlyOrderChosenCurrency(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNFTOnlyOrderCollectionId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTOnlyOrderMessages(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNFTOnlyOrderProfileId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTOnlyOrderPubId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTOnlyOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getNFTOnlyOrderTimestamp(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTOnlyOrderTokenIds(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getNFTOnlyOrderTotalPrice(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderBuyer(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrderBuyerProfileId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderChosenCurrency(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrderDetails(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrderMessages(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOrderProfileId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderPubId(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderSubOrders(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderTimestamp(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderTotalPrice(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderWithPKP(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getSubOrderAmount(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubOrderCollectionId(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubOrderFulfiller(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubOrderIsFulfilled(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getSubOrderOrderId(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubOrderPrice(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubOrderStatus(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getSubOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getSubOrderTokenIds(
    _subOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  marketCreator(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  printAccessControl(overrides?: CallOverrides): Promise<string>;

  printDesignData(overrides?: CallOverrides): Promise<string>;

  setMarketCreatorAddress(
    _newMarketCreatorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNFTOnlyOrderMessage(
    _newMessage: string,
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOrderDetails(
    _newDetails: string,
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOrderMessage(
    _newMessage: string,
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrintAccessControlAddress(
    _newPrintAccessControlAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrintDesignDataAddress(
    _newPrintDesignDataAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubOrderStatus(
    _subOrderId: BigNumberish,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubOrderisFulfilled(
    _subOrderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createNFTOnlyOrder(
      _tokenIds: BigNumberish[],
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _collectionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      _subOrderIds: BigNumberish[],
      _details: string,
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _withPKP: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createSubOrder(
      _tokenIds: BigNumberish[],
      _fullfiller: string,
      _buyer: string,
      _amount: BigNumberish,
      _orderId: BigNumberish,
      _price: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressToNFTOnlyOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAddressToOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAddressToTokenIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNFTOnlyOrderAmount(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTOnlyOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTOnlyOrderCollectionId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNFTOnlyOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTOnlyOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderTokenIds(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNFTOnlyOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrderDetails(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderSubOrders(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderWithPKP(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSubOrderAmount(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderCollectionId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderFulfiller(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubOrderIsFulfilled(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSubOrderOrderId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderPrice(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderStatus(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSubOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getSubOrderTokenIds(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    marketCreator(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    printAccessControl(overrides?: CallOverrides): Promise<string>;

    printDesignData(overrides?: CallOverrides): Promise<string>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTOnlyOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderDetails(
      _newDetails: string,
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubOrderStatus(
      _subOrderId: BigNumberish,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubOrderisFulfilled(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NFTOnlyOrderCreated(uint256,uint256,address,uint256,uint256,address)"(
      orderId?: null,
      totalPrice?: null,
      currency?: null,
      pubId?: null,
      profileId?: null,
      buyer?: null
    ): NFTOnlyOrderCreatedEventFilter;
    NFTOnlyOrderCreated(
      orderId?: null,
      totalPrice?: null,
      currency?: null,
      pubId?: null,
      profileId?: null,
      buyer?: null
    ): NFTOnlyOrderCreatedEventFilter;

    "OrderCreated(uint256,uint256,address,uint256,uint256,address)"(
      orderId?: null,
      totalPrice?: null,
      currency?: null,
      pubId?: null,
      profileId?: null,
      buyer?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: null,
      totalPrice?: null,
      currency?: null,
      pubId?: null,
      profileId?: null,
      buyer?: null
    ): OrderCreatedEventFilter;

    "SubOrderIsFulfilled(uint256)"(
      subOrderId?: BigNumberish | null
    ): SubOrderIsFulfilledEventFilter;
    SubOrderIsFulfilled(
      subOrderId?: BigNumberish | null
    ): SubOrderIsFulfilledEventFilter;

    "UpdateNFTOnlyOrderMessage(uint256,string)"(
      orderId?: BigNumberish | null,
      newMessageDetails?: null
    ): UpdateNFTOnlyOrderMessageEventFilter;
    UpdateNFTOnlyOrderMessage(
      orderId?: BigNumberish | null,
      newMessageDetails?: null
    ): UpdateNFTOnlyOrderMessageEventFilter;

    "UpdateOrderDetails(uint256,string)"(
      orderId?: BigNumberish | null,
      newOrderDetails?: null
    ): UpdateOrderDetailsEventFilter;
    UpdateOrderDetails(
      orderId?: BigNumberish | null,
      newOrderDetails?: null
    ): UpdateOrderDetailsEventFilter;

    "UpdateOrderMessage(uint256,string)"(
      orderId?: BigNumberish | null,
      newMessageDetails?: null
    ): UpdateOrderMessageEventFilter;
    UpdateOrderMessage(
      orderId?: BigNumberish | null,
      newMessageDetails?: null
    ): UpdateOrderMessageEventFilter;

    "UpdateSubOrderStatus(uint256,uint8)"(
      subOrderId?: BigNumberish | null,
      newSubOrderStatus?: null
    ): UpdateSubOrderStatusEventFilter;
    UpdateSubOrderStatus(
      subOrderId?: BigNumberish | null,
      newSubOrderStatus?: null
    ): UpdateSubOrderStatusEventFilter;
  };

  estimateGas: {
    createNFTOnlyOrder(
      _tokenIds: BigNumberish[],
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _collectionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createOrder(
      _subOrderIds: BigNumberish[],
      _details: string,
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _withPKP: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createSubOrder(
      _tokenIds: BigNumberish[],
      _fullfiller: string,
      _buyer: string,
      _amount: BigNumberish,
      _orderId: BigNumberish,
      _price: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAddressToNFTOnlyOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressToOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressToTokenIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderAmount(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderCollectionId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTOnlyOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderTokenIds(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTOnlyOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderDetails(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderSubOrders(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderWithPKP(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderAmount(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderCollectionId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderFulfiller(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderIsFulfilled(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderOrderId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderPrice(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderStatus(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubOrderSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getSubOrderTokenIds(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketCreator(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    printAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    printDesignData(overrides?: CallOverrides): Promise<BigNumber>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNFTOnlyOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOrderDetails(
      _newDetails: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubOrderStatus(
      _subOrderId: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubOrderisFulfilled(
      _subOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createNFTOnlyOrder(
      _tokenIds: BigNumberish[],
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _collectionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createOrder(
      _subOrderIds: BigNumberish[],
      _details: string,
      _chosenCurrency: string,
      _buyer: string,
      _pubId: BigNumberish,
      _profileId: BigNumberish,
      _buyerProfileId: BigNumberish,
      _totalPrice: BigNumberish,
      _withPKP: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createSubOrder(
      _tokenIds: BigNumberish[],
      _fullfiller: string,
      _buyer: string,
      _amount: BigNumberish,
      _orderId: BigNumberish,
      _price: BigNumberish,
      _collectionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAddressToNFTOnlyOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressToOrderIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressToTokenIds(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderAmount(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderCollectionId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderTokenIds(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTOnlyOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBuyer(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBuyerProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderChosenCurrency(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderDetails(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderMessages(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderProfileId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderPubId(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderSubOrders(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderTimestamp(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderTotalPrice(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderWithPKP(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderAmount(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderCollectionId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderFulfiller(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderIsFulfilled(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderOrderId(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderPrice(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderStatus(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubOrderSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubOrderTokenIds(
      _subOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printAccessControl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    printDesignData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMarketCreatorAddress(
      _newMarketCreatorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNFTOnlyOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOrderDetails(
      _newDetails: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOrderMessage(
      _newMessage: string,
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrintAccessControlAddress(
      _newPrintAccessControlAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrintDesignDataAddress(
      _newPrintDesignDataAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubOrderStatus(
      _subOrderId: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubOrderisFulfilled(
      _subOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
